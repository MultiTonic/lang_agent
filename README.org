* idea : create an ocaml functional agent for talking to llms.
** hijack urls
** bootstrap on ollama, then to llama.cpp, then embed inside of llama.cpp as well.
** use threads, ezcurl-lwt
** produce/consume quasi quoted interfaces to other systems using metacoq streams, streams of encoded type declarations, functions, kinds, records, constructors etc.
** only allow valid interactions using strong types, and proofs etc
** define workflows in ocaml or metacoq streams, even encoded in giant urls
** follow urls that contain the requested system encoded in url.
** produces urls that describe systems that are the result of the thinking
** metacoq urls
** postprocess responses and insert urls with annotations that can be visited
or not by agent,
can expand the results significantly. filtered by the user agent.

dune exec -- ./bin/argiope.exe "https://writemycode.com?goal=snakegame"


dune exec -- ./bin/argiope.exe https://github.com/meta-introspector/lang_agent/blob/3d485ff60e2872cbb920980a5fd2dbde908215ed/bin/argiope.ml#L28?q="argiope is a virtual hyperspace navigation simulator"


* chunker
takes two files, the prompt and the tochunk, that is split by \n and process

#+begin_src shell
dune exec bin/chunker.exe ./prompt.txt ./separator.txt todo.txt
#+end_src

dune exec bin/chunker.exe ./prompt.txt ./separator.txt ~/2024/01/07/ppx-introspector/test/test2b.ml


* worker
#+begin_src shell
dune exec bin/worker.exe ./prompt.txt ./separator.txt task.txt
#+end_src
