
#+begin_src input
We are working on creating a GBNF grammar for a game. It follows a standard EBNF notation at the end of this message (see TARGET). We translating an dungeon into this EBNF in chunks. Consider the following chunk of the dungeon between BEGINSRC and ENDSRC for translation to EBNF. BEGINSRC  

 Result: Here is an example of a multi-dimensional grammar for generating prompts for the hacker game dungeon, written in EBNF notation:

game\_dungeon ::= {level}

level ::= physical | mental | astral | etheric | emotional | mental | spiritual | divine

physical ::=
("You are in a physical level of the dungeon and you see:"
| "You are surrounded by dense, heavy energy as you enter the"
| "As you descend further into the dungeon, you notice the air"
| "The walls of this level of the dungeon are made of rough,"
| "You hear the sound of dripping water echoing through the"
| "You see glints of metal in the distance, could there be"
| "The smell of damp earth fills your nostrils as you explore"
| "You notice a faint humming coming from the walls, it's almost"
| "As you walk, you feel the weight of the earth above you,"
| "You see rays of light streaming in through cracks in the ceiling,")
{object | npc}

mental ::=
("You find yourself in a mental level of the dungeon, where"
| "As you explore this level of the dungeon, you become aware"
| "The air in this level of the dungeon is thin and cold, making"
| "The walls of this level of the dungeon are made of smooth,"
| "You hear whispers and voices all around you, but there's"
| "You see shadows flitting through the corners of your eyes,"
| "A sense of unease settles over you as you explore this"
| "You feel like you're being watched, but you can't see anyone,"
| "As you walk, you start to feel like you're losing your grip"
| "The light in this level of the dungeon is dim and flickering,")
{object | npc}

...

object ::=
("a chest" |
"a pile of gold" |
"a glowing crystal" |
"an ancient tome" |
"a strange device" |
"a rusty key" |
"a mysterious potion" |
"a powerful wand" |
"a magical amulet" |
"a enchanted sword")

npc ::=
("a curious goblin" |
"a wise old sage" |
"a menacing demon" |
"a mischievous fairy" |
"a powerful wizard" |
"a beautiful princess" |
"a fearsome dragon" |
"a lost traveler" |
"a mysterious figure" |
"a ghostly apparition")

This grammar covers eight different levels of the dungeon, each with its own unique atmosphere and set of objects and NPCs. The grammar can be customized and expanded as needed to suit the specific requirements of the game. The function fold\_left is a higher-order function that takes an accumulating parameter `acc` and a binary function `op`, it applies the binary function `op` between the first two elements of the list, then feeds the result as the accumulating parameter to the next iteration, and so on until the end of the list. This allows you to easily apply any function to all elements of a list while maintaining an intermediate state.
#+end_src
 ENDSRC . Please rewrite it to be more beautiful and in EBNF form. We are going to use the following TARGET: BEGINTARGET comment ::= "#" [a-zA-Z0-9 \t]*
letter ::= [a-zA-Z]
digit ::= [0-9]
S ::= ( " " | "\n" | "\t" | "\r"  )
symbol ::= "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"  | "'" |  "=" | "|" | "." | "," | ";" | "-"        | "+" | "*" | "?" 
character ::= letter | digit | symbol | "_" | " "
identifier ::= letter ( letter | digit | "_" )*
terminal ::= "'" character  "'"  ( character  "'" )  "'"
terminator ::= (";" | ".") 
term ::= "("   S   rhs   S   ")"      | "["   S   rhs   S   "]"      | "{"   S   rhs   S   "}"      | terminal      | identifier
factor ::= term  S  "?"         | term   S   "*"        | term   S   "+"        | term   S   "-"   S   term        | term   S
concatenation ::= ( S   factor   S   "," ? ) +
alternation ::= ( S   concatenation   S   "|" ? ) +
rhs ::= alternation
lhs ::= identifier
rule ::= lhs   S   "="   S   rhs   S   terminator comment*
root ::= comment* ( S   rule   S ) * ENDTARGET as our target grammar format. Please rewrite SRC into TARGET. You are to only respond using the target custom GBNF grammar and put  descriptions or comments at the end of the rule with a #, see the grammar for rules. Please start with a comment using '#' to start comments on a new line. 

#+end_src
#+begin_src output
 Result: 
For = 

identifier 

assignment 

for 

l_brace 

S 

statement 

semi_colon 

r_brace 

'(' ''   ')' '' 

terminal 

terminator 

term 

factor 

concatenation 

alternation 

rhs 

lhs 

rule 

root 

{
  ''''''
  ''';''   Assigns 
 identifier 
#+end_src
