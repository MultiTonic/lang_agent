
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you could define your EBNF grammar with the naming conventions you described:
```
<prd_folder_rules> ::= <prd_take_inputs_rule> | <prd_created_new_output_rule> | <prd_test_and_repeat_loop_rule>

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' ('grammar' ':' <prd_grammar_tkn_A>) (',' <prd_previous_results_tkn_D>) (',' <prd_initial_example_tkn_B>) (';') <newline>
                            <prd_new_example_tkn_C> ';' <newline>
                            <prd_created_new_output_rule>

<prd_previous_results_tkn_D> ::= 'Previous' 'Results' ':' <prd_token_tkn_D>

<prd_initial_example_tkn_B> ::= 'Initial' 'example' ':' <prd_token_tkn_B>

<prd_new_example_tkn_C> ::= 'New' 'Example' ':' <prd_token_tkn_C>

<prd_created_new_output_rule> ::= 'Created' 'new' 'output' <prd_token_tkn_D> '.' <newline>
                            <prd_test_and_repeat_loop_rule>

<prd_test_and_repeat_loop_rule> ::= 'Test' <prd_created_new_output_rule> (('If' 'good' ',' 'repeat' 'loop' 'with' 'new') <prd_created_new_output_rule>) 'Othewise' 'feed' 'error' 'back' 'to' 'create' 'new' <prd_created_new_output_rule> 'up' 'to' '3' 'times' '.' <newline>
                            <prd_start_with_this_following_code_rule>

<prd_start_with_this_following_code_rule> ::= 'start' 'with' 'this' 'following' 'code' 'and' 'rewrite' 'it' 'to' 'suit' 'our' 'needs' '.' <newline>
                            <prd_folder_rules>

<prd_grammar_tkn_A> ::= 'A'
<prd_token_tkn_D> ::= 'D'
<prd_token_tkn_B> ::= 'B'
<prd_token_tkn_C> ::= 'C'

<newline> ::= '\n'
```
This is just an example, you can adjust the grammar to fit your specific needs.

You could also consider using a parser generator like ANTLR, Yacc, Bison, etc. that allows you to define your grammar in EBNF format and automatically generates a lexer and parser for you. This would save you from having to write the lexer and parser by hand, which can be quite complex and error-prone.
#+end_src
