
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

ebnf
----

```
<folder> ::= prd_folder_tkn_left_curly_bracket
                 <take_inputs>
                 prd_folder_tkn_right_curly_bracket

<take_inputs> ::= prd_take_inputs_tkn_function
                       prd_grammar_tkn_identifier
                   | 
                       prd_take_inputs_tkn_function
                       prd_previous_results_tkn_identifier
                   | 
                       prd_take_inputs_tkn_function
                       prd_new_example_tkn_identifier

<grammar> ::= prd_grammar_tkn_left_parenthesis
                 <A>
             prd_grammar_tkn_right_parenthesis

<previous_results> ::= prd_previous_results_tkn_left_parenthesis
                          prd_D_identifier
                      prd_previous_results_tkn_right_parenthesis

<new_example> ::= prd_new_example_tkn_left_parenthesis
                     prd_C_identifier
                 prd_new_example_tkn_right_parenthesis

<A> ::= ...

<D> ::= ...

...
```

This is just an example, you'll need to define the rest of your grammar (e.g. `<A>`, `<D>`, etc.) according to your specific requirements.

You can use tools like `yacc` or `antlr` to generate a parser for this EBNF grammar and then integrate it into your system.

Also, you may want to consider using a parser generator tool that supports EBNF natively, such as ANTLR or Ragel, rather than writing the parser by hand with a function like `fold_left`. These tools can automatically generate a parser for you from an EBNF grammar, which can save time and reduce the potential for errors.
#+end_src
