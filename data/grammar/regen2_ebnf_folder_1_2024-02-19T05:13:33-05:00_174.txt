
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:
```
<prd_folder_rule> ::= 'folder' '{' <prd_take_inputs_rule> '}'

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' <prd_grammar_tkn_A> ',' <prd_previous_results_tkn_D> ',' <prd_new_example_tkn_C> ',' <prd_created_new_output_tkn_D>

<prd_grammar_tkn_A> ::= 'A'
<prd_previous_results_tkn_D> ::= 'D'
<prd_initial_example_tkn_B> ::= 'B'
<prd_new_example_tkn_C> ::= 'C'
<prd_created_new_output_tkn_D> ::= 'D'

<prd_test_rule> ::= 'Test' <prd_D_tkn> '.' 'If' 'good,' 'repeat' 'loop' 'with' 'new' <prd_D_tkn> 'Othewise' 'feed' 'error' 'back' 'to' 'create' 'new' <prd_D_tkn> 'up' 'to' '3' 'times' '.'

<prd_start_rule> ::= 'start' 'with' <prd_this_following_code_tkn_string> 'and' 'rewrite' 'it' 'to' 'suit' <prd_our_needs_tkn_string> '.'
```
You can continue defining the rest of your grammar using this naming convention. This way, all of your rules and tokens are easily identifiable and consistent throughout your grammar.
#+end_src
