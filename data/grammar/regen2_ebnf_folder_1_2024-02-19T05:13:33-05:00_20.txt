
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```ebnf
<folder> ::= prd_folder_tkn_name '(' prd_folder_tkn_inputs ')' prd_folder_tkn_previous_results '=' <D> prd_folder_tkn_new_example '=' <C> prd_folder_tkn_created_output '=' <D'>
            (prd_folder_tkn_test '(' prd_folder_tkn_good ')' | prd_folder_tkn_error) '*' prd_folder_tkn_repeat '{' prd_folder_tkn_number '3}' ';'

<D>       ::= <A>

<C>       ::= <B>

<D'>      ::= <A'>

<test>    ::= prd_test_tkn_if prd_test_tkn_good prd_test_tkn_then prd_test_tkn_repeat ';'

<number>  ::= '0'..'9'+

<A>       ::= <rule1> | <rule2> | ...

<A'>      ::= <rule1'> | <rule2'> | ...

<B>       ::= <example1> | <example2> | ...

<C>       ::= <new_example1> | <new_example2> | ...
```

This is just an example and you can add or remove rules as needed. The important part is to follow the naming conventions you described, where each rule starts with `prd_` and each token starts with `tkn_`. Additionally, if a token is used in a rule, it should be named `prd_<prod name>_tkn_<token name>`.
#+end_src
