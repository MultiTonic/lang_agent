
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar with the requested naming conventions:

<BNF\_GRAMMAR> ::= prd\_grammar\_tkn_A
prd\_grammar\_tkn\_A = { <PRODUCTION> } ;

<PRODUCTION> ::= prd\_production\_tkn\_NAME 
prd\_production\_tkn\_NAME = <LEFT\_HAND\_SIDE> '::=' <RIGHT\_HAND\_SIDE> ';' ;

<LEFT\_HAND\_SIDE> ::= <NON\_TERMINAL>

<NON\_TERMINAL> ::= prd\_non\_terminal\_tkn\_NAME
prd\_non\_terminal\_tkn\_NAME = [a-zA-Z]+ ;

<RIGHT\_HAND\_SIDE> ::= <SEQUENCE> | <CHOICE> | <CONCATENATION> | <OPT> | <REPETITION>

<SEQUENCE> ::= prd\_sequence\_tkn
prd\_sequence\_tkn = '(' { <TERM> } ')' ;

<TERM> ::= <NON\_TERMINAL> | <TOKEN>

<CHOICE> ::= prd\_choice\_tkn
prd\_choice\_tkn = '[' { <TERM> } ']'

<CONCATENATION> ::= prd\_concatenation\_tkn
prd\_concatenation\_tkn = '{' { <TERM> } '}'

<OPT> ::= prd\_opt\_tkn
prd\_opt\_tkn = '(' '?' ')'

<REPETITION> ::= prd\_repetition\_tkn
prd\_repetition\_tkn = '(' '*' ')'

<TOKEN> ::= prd\_token\_tkn\_NAME
prd\_token\_tkn\_NAME = [a-zA-Z]+ ;

It is a generalized EBNF that can be used for creating any grammar. The non terminal symbols starts with the name of the rule and token are also named in similar way i.e prd\_<rule\_name>\_tkn\_<token\_name> .

Please note this is just an example, you may need to modify it according to your specific use case.
#+end_src
