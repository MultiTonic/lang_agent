
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure! Here is an example of how you could define your EBNF grammar with the naming conventions you described:
```
<prd_folder_rules> ::=
    'take' 'inputs' ':' <prd_input_specifier_tkn_grammar> ';'
        <prd_input_specifier_tkn_previous_results> ':' <prd_input_specifier_tkn_D> ';'
        <prd_input_specifier_tkn_new_example> ':' <prd_input_specifier_tkn_C> ';'
    <prd_input_specifier_tkn_created_new_output> ':' <prd_input_specifier_tkn_D> ';'
    <prd_input_specifier_tkn_test> '.' <prd_input_specifier_tkn_if_good> ',' <prd_input_specifier_tkn_repeat_loop> '{' <prd_input_specifier_tkn_new_D> '}'
    <prd_input_specifier_tkn_otherwise> <prd_input_specifier_tkn_feed_error> ':' <prd_input_specifier_tkn_create_new_D> '^' <prd_input_specifier_tkn_up_to_three_times_tkn_3> ';'
    <prd_input_specifier_tkn_start_with> '{' <prd_input_specifier_tkn_this_following_code> '}' ';'
    <prd_input_specifier_tkn_rewrite_it> '{' <prd_input_specifier_tkn_to_suit_our_needs_tkn> '}' ';'
<prd_input_specifier_tkn_grammar> ::= <prd_input_specifier_tkn_A>
<prd_input_specifier_tkn_previous_results> ::= <prd_input_specifier_tkn_D>
<prd_input_specifier_tkn_new_example> ::= <prd_input_specifier_tkn_C>
<prd_input_specifier_tkn_created_new_output> ::= <prd_input_specifier_tkn_D>
<prd_input_specifier_tkn_test> ::= <prd_input_specifier_tkn_if_good> ',' <prd_input_specifier_tkn_repeat_loop>
<prd_input_specifier_tkn_if_good> ::= 'good'
<prd_input_specifier_tkn_repeat_loop> ::= 'repeat' 'loop'
<prd_input_specifier_tkn_new_D> ::= <prd_input_specifier_tkn_D>
<prd_input_specifier_tkn_error> ::= 'error'
<prd_input_specifier_tkn_create_new_D> ::= 'create' 'new' 'D'
<prd_input_specifier_tkn_up_to_three_times_tkn> ::= <prd_input_specifier_tkn_up_to_three_times_tkn_3>
<prd_input_specifier_tkn_up_to_three_times_tkn_3> ::= '3'
<prd_input_specifier_tkn_start_with> ::= 'start' 'with'
<prd_input_specifier_tkn_this_following_code> ::= 'this' <prd_input_specifier_tkn_following_code>
<prd_input_specifier_tkn_following_code> ::= 'following' 'code'
<prd_input_specifier_tkn_rewrite_it> ::= 'rewrite' 'it'
<prd_input_specifier_tkn_to_suit_our_needs_tkn> ::= 'to' 'suit' <prd_input_specifier_tkn_our_needs_tkn> 'needs'
<prd_input_specifier_tkn_our_needs_tkn> ::= 'our'
```
This is just one way you could define the grammar. You can adjust it to fit your specific needs. The key thing is to use the naming convention you described, where each rule starts with `prd_` and each token is named `prd_<rule name>_tkn_<token name>`. This will make it easy to understand and maintain your grammar.
#+end_src
