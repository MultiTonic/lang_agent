
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

<bnf> ::= '('<prod_name_1'>' <rule_1> ')'
         '(' '<prod_name_2'>' <rule_2> ')'
         ...
         ('|' '<prod\_name\_n>' '<rule\_n>')*

<rule> ::= <seq> [<opt>] [<rep>]

<seq> ::= <term> {<seq_part>}

<seq\_part> ::= <term>

<term> ::= '<' '<prod\_name>' '>'
         | '<' '<prod\_name>' '_' '<token\_name>' '>'
         | '<' 'tkn\_' '<token\_name>' '>'

<opt> ::= '[' <rule> ']'

<rep> ::= '{' <num> '}'
          | '{' <num> ',' <num> '}'
          | '{' <num> ',' '}''

<num> ::= <digit> {<digit>}

<digit> ::= '0' .. '9'
</bnf>

In this EBNF grammar, each production is named using the `prd_` prefix followed by the name of the production. Each token used in a production is named using the `tkn_` prefix followed by the name of the token. If a token is used in a production, it is named `prd_<prod\_name>\_tkn_<token\_name>`.

For example, the production for a sequence (`<seq>`) would be defined as follows:

<seq> ::= <term> {<seq\_part>}

Here, `<term>` and `<seq\_part>` are both terms that can be expanded using the rules for `<term>`. The curly braces (`{}`) indicate zero or more repetitions of the enclosed rule.

You can use this EBNF grammar as a starting point for defining your own grammars, and then extend it as needed to add additional production rules and token names.
#+end_src
