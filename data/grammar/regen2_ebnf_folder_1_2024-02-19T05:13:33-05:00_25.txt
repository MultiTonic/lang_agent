
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your EBNF grammar with the naming conventions you described:

```ebnf
<prd_folder_rules> ::= 
  'folder' '{' <prd_take_input_rules> '}'

<prd_take_input_rules> ::= 
  <prd_take_grammar_rules>
  <prd_take_previous_results_rules>
  <prd_take_new_example_rules>
  <prd_test_output_rules>
  <prd_start_loop_rules>

<prd_take_grammar_rules> ::= 
  'take' 'inputs' ':' tkn_grammar ';'

<prd_take_previous_results_rules> ::= 
  <prd_previous_results_initialization_rules>
  <prd_update_previous_results_rules>

<prd_previous_results_initialization_rules> ::= 
  'Previous' 'Results' ':' tkn_identifier ':=' tkn_D ';'

<prd_update_previous_results_rules> ::= 
  'Created' 'new' 'output' tkn_D ';'
   ( 'Test' tkn_D ';' <prd_conditional_test_rules> )*
   ('start' 'with' <prd_take_input_rules> 'and' 'rewrite' 'it' 'to' 'suit' 'our' 'needs' ';')+

<prd_conditional_test_rules> ::= 
  'if' 'good' ','
| 'otherwise' 'feed' 'error' 'back' 'to' 'create' 'new' tkn_D 'up' 'to' '3' 'times' ';'

<prd_take_new_example_rules> ::= 
  'New' 'Example' ':' tkn_C ';'

<prd_test_output_rules> ::= 
  'Test' tkn_D ';' <prd_conditional_test_rules>

<prd_start_loop_rules> ::= 
  ('repeat' 'loop' 'with' 'new' tkn_D) | ('end')
```

Note: I assumed that `A`, `B`, `C`, and `D` are token names, if they are not, you should replace them with the corresponding token names in your grammar.
#+end_src
