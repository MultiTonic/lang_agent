
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```
<prd_folder_rules> ::= 
  'take' <prd_input_tkn_grammar> ':' <prd_input_tkn_A>
  <prd_input_tkn_separator> <prd_input_tkn_PreviousResults> ':' <prd_input_tkn_D>
  <prd_input_tkn_initialExample> ':' <prd_input_tkn_B>
  <prd_input_tkn_NewExample> ':' <prd_input_tkn_C>
  <prd_input_tkn_createdNewOutput> ':' <prd_input_tkn_D>
  <prd_input_tkn_test> '.' <prd_input_tkn_ifGood> ',' <prd_input_tkn_repeatLoop> '{'
  <prd_input_tkn_newD> ':' <prd_input_tkn_D>
  <prd_input_tkn_otherwise> '}' <prd_input_tkn_feedError> ':' <prd_input_tkn_D>
  <prd_input_tkn_upToThreeTimes> '.'

<prd_input_tkn_grammar> ::= <prd_terminal_token_A>
<prd_input_tkn_PreviousResults> ::= <prd_terminal_token_PreviousResults>
<prd_input_tkn_initialExample> ::= <prd_terminal_token_initialExample>
<prd_input_tkn_NewExample> ::= <prd_terminal_token_NewExample>
<prd_input_tkn_createdNewOutput> ::= <prd_terminal_token_createdNewOutput>
<prd_input_tkn_test> ::= <prd_terminal_token_test>
<prd_input_tkn_ifGood> ::= <prd_terminal_token_ifGood>
<prd_input_tkn_repeatLoop> ::= <prd_terminal_token_repeatLoop>
<prd_input_tkn_newD> ::= <prd_terminal_token_newD>
<prd_input_tkn_otherwise> ::= <prd_terminal_token_otherwise>
<prd_input_tkn_feedError> ::= <prd_terminal_token_feedError>
<prd_input_tkn_upToThreeTimes> ::= <prd_terminal_token_upToThreeTimes>
<prd_input_tkn_A> ::= 'A'
<prd_input_tkn_D> ::= 'D'
<prd_input_tkn_B> ::= 'B'
<prd_input_tkn_C> ::= 'C'
<prd_input_tkn_separator> ::= <prd_terminal_token_space> | <prd_terminal_token_tab>
<prd_terminal_token_A> ::= 'A'
<prd_terminal_token_D> ::= 'D'
<prd_terminal_token_B> ::= 'B'
<prd_terminal_token_C> ::= 'C'
<prd_terminal_token_space> ::= ' '
<prd_terminal_token_tab> ::= <prd_non_terminal_token_tab>
<prd_non_terminal_token_tab> ::= '\t'
```

This is just an example and you can adjust it to suit your needs. The idea here is to have a naming convention that makes it clear what each non-terminal and terminal represents in the grammar.

You could also use some EBNF shorthand notations like:

```
<prd_input_tkn_(grammar|PreviousResults|initialExample|NewExample)> ::= <prd_terminal_token_A|D|B|C>
<prd_input_tkn_separator> ::= <prd_terminal_token_space> | <prd_non_terminal_token_tab>
```

It's up to you and your team to decide what works best for your project.
#+end_src
