
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure! Here is an example of how you can define your EBNF grammar with the specified naming conventions:
```
<prd_folder_rules> ::= <prd_take_inputs_tkn_grammar> ':' <prd_take_inputs_tkn_previous_results>
                      | <prd_test_tkn> <prd_take_inputs_tkn_new_example> '.'
                      | <prd_start_tkn> '<' <prd_take_input_tkn_inputs> '>' ';'

<prd_take_inputs_tkn_grammar> ::= <prd_identifier_tkn_A>
                                  | <prd_take_inputs_tkn_previous_results>
                                  | <prd_take_inputs_tkn_new_example>

<prd_take_inputs_tkn_previous_results> ::= <prd_identifier_tkn_D>
                                            | <prd_take_inputs_tkn_initial_example>

<prd_take_inputs_tkn_initial_example> ::= <prd_identifier_tkn_B>

<prd_take_inputs_tkn_new_example> ::= <prd_identifier_tkn_C>

<prd_test_tkn> ::= 'T' 'e' 's' 't'

<prd_start_tkn> ::= 'S' 't' 'a' 'r' 't'

<prd_identifier_tkn_A> ::= 'A'
<prd_identifier_tkn_B> ::= 'B'
<prd_identifier_tkn_C> ::= 'C'
<prd_identifier_tkn_D> ::= 'D'

<prd_take_input_tkn_inputs> ::= <prd_take_inputs_tkn_grammar>
                                | <prd_take_inputs_tkn_previous_results>
                                | <prd_take_inputs_tkn_new_example>
```
This EBNF grammar follows the naming conventions you specified and is more expressive and explicit. It breaks down the `folder` production into several smaller productions, each with a clear meaning. This makes it easier to understand and modify the grammar.

Let me know if there's anything else I can help you with!
#+end_src
