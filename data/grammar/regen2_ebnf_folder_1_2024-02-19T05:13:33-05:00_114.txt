
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```
<prd_folder_rules_tkn_grammar> ::= <prd_folder_rules_tkn_rule_A> | <prd_folder_rules_tkn_error>

<prd_folder_rules_tkn_rule_A> ::= 'A' ':' { <prd_folder_rules_tkn_rule_B> } '.'

<prd_folder_rules_tkn_rule_B> ::= 'B' ':' [ '<' <prd_folder_rules_tkn_token_C> '>' ] | '<' <prd_folder_rules_tkn_token_D> '>'

<prd_folder_rules_tkn_token_C> ::= 'C'

<prd_folder_rules_tkn_token_D> ::= 'D'

<prd_folder_rules_tkn_error> ::= 'E' ':' <any_characters> '.'
```

In this example, `prd_folder_rules_tkn_grammar` is the start symbol of the grammar. It can either derive a correct sequence of rules (either `prd_folder_rules_tkn_rule_A` or `prd_folder_rules_tkn_error`) or an error sequence (also represented by `prd_folder_rules_tkn_error`).

The `prd_folder_rules_tkn_rule_A` rule represents a sequence of `prd_folder_rules_tkn_rule_B` rules, followed by a period. The `prd_folder_rules_tkn_rule_B` rule can represent either a single token (`prd_folder_rules_tkn_token_C`) or a sequence of tokens enclosed in angle brackets (`prd_folder_rules_tkn_token_D`).

The `prd_folder_rules_tkn_error` rule represents an error sequence, which is any sequence of characters followed by a period. This can be used to represent errors that occur during parsing.

You can extend this grammar to include additional rules and tokens as needed, making sure to follow the naming conventions you described.
#+end_src
