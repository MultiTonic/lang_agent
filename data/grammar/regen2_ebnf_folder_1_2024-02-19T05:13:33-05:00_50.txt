
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure! Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```ebnf
<folder> ::= prd_folder_tkn_name ':' prd_folder_tkn_inputs '[' <input> (',' <input>) ']'

<input> ::= prd_input_tkn_grammar ':' prd_input_tkn_grammar_identifier
          | prd_input_tkn_previous_results ':' prd_input_tkn_previous_results_identifier
          | prd_input_tkn_new_example ':' prd_input_tkn_new_example_identifier

<grammar_identifier> ::= 'A'

<previous_results_identifier> ::= 'D'

<new_example_identifier> ::= 'B' | 'C'

<loop> ::= prd_loop_tkn_test '{' <test> '}' prd_loop_tkn_if_good '{' prd_loop_tkn_repeat_loop '{' <repeat_loop> '}' '}'

<test> ::= prd_test_tkn_test 'D'

<repeat_loop> ::= prd_repeat_loop_tkn_create_new_output '{' <create_new_output> '}' prd_repeat_loop_tkn_test '{' <test> '}' prd_repeat_loop_tkn_if_not_good '{' <if_not_good> '}'

<create_new_output> ::= prd_create_new_output_tkn_created_new_output 'D'

<if_not_good> ::= prd_if_not_good_tkn_feed_error '{' <feed_error> '}' prd_if_not_good_tkn_up_to '{' <up_to> '}' prd_if_not_good_tkn_times

<feed_error> ::= prd_feed_error_tkn_feed_error 'D'

<up_to> ::= prd_up_to_tkn_three '3'
```

This EBNF grammar defines a `folder` rule, which represents the overall structure of your code. The `folder` consists of an name, followed by a list of inputs enclosed in brackets. Each input can be one of three types: a grammar identifier (either 'A'), a previous results identifier (either 'D'), or a new example identifier ('B' or 'C').

The `loop` rule represents the main loop of your code, which tests the output 'D', and if it is good, repeats the loop. If the output is not good, it feeds an error and repeats the loop up to three times. The `test`, `repeat_loop`, and `if_not_good` rules define the behavior of these sub-parts of the loop.

The `create_new_output` rule simply creates a new output 'D'. The `feed_error` rule feeds an error to the system, and the `up_to` rule limits the number of times the loop is repeated to three.
#+end_src
