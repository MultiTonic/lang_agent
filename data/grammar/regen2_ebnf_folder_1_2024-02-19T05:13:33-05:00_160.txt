
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's the updated code following your naming conventions:

```ebnf
(*
  Folder EBNF grammar

  take inputs :
    - Grammar: A
    - Previous Results: D initially, Initial example: B
    - New Example: C
    - Created new output D.
    - Test D. If good, repeat loop with new D. Otherwise feed error back to create new D up to 3 times.
*)

module Folder = struct

  type t = {
    grammar : Grammar.t;
    prev_results : Results.t;
    example : Example.t;
  }

  let prd_take_inputs =
    [ 'grammar' -> Gramar.prd_grammar_tkn_Grammar;
      'previous_results' -> Results.prd_results_tkn_PreviousResults;
      'example' -> Example.prd_example_tkn_Example;
    ]

  let prd_rule =
    [ 'take_inputs' -> TakeInputs.prd_take_inputs_tkn_TakeInputs; ]

  let rec fold_left op acc = function
    | []   -> acc
    | h :: t -> fold_left op (op acc h) t

end

module Gramar = struct

  type t = unit

  let prd_grammar = []

end

module Results = struct

  type t = unit

  let prd_results = []

end

module Example = struct

  type t = unit

  let prd_example = []

end

module TakeInputs = struct

  type take_inputs = Folder.t

  let prd_take_inputs_tkn_TakeInputs = [ '{' -> '}'; ]

end
```

This EBNF grammar defines the structure of a `Folder` module, which contains a grammar, previous results, and an example. The naming conventions you specified have been applied to each token in the rules.
#+end_src
