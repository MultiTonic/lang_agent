
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```
(* EBNF grammar for a folder *)

(* A folder contains a list of files or other folders *)
prd_folder     ::= '(' ( prd_file  | prd_folder ) ')' *.

(* A file has a name and some content *)
prd_file       ::= tkn_file_name tkn_file_content .

(* File names start with an alphabetic character, followed by any number of alphanumeric characters or underscores *)
tkn_file_name  ::= [a-zA-Z] [a-zA-Z0-9_]* .

(* File content can be any sequence of characters that is not empty or a closing parenthesis *)
tkn_file_content ::= ~( ')' | EOI )* .

(* End of input marker *)
EOI            ::= eof .
```

This grammar defines a `folder` production, which can contain zero or more `file` or `folder` productions. A `file` consists of a file name (`tkn_file_name`) followed by some content (`tkn_file_content`). The file name must start with an alphabetic character and can be followed by any number of alphanumeric characters or underscores. The file content is defined as any sequence of characters that is not empty or a closing parenthesis.

Note that this grammar uses the `~` symbol to represent "any character except for...". This is a common convention in EBNF grammars, but it may vary depending on the specific implementation you are using. You will need to consult the documentation for your particular EBNF tool to determine the correct syntax for negative character sets.

I hope this helps! Let me know if you have any other questions.
#+end_src
