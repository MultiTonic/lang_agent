
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar with the requested naming conventions:

<BNF> ::= '(' <PRODUCTION> { '|' <PRODUCTION> } ')'

<PRODUCTION> ::= <PROD_NAME> '=' <RULE>

<PROD_NAME> ::= 'prd'_ <ID>

<RULE> ::= <RULE_FACTOR> { ('*' | '+' | '-' | '/') <RULE_FACTOR> }

<RULE_FACTOR> ::= <TERM> { ('&' | '^' | '|') <TERM> }

<TERM> ::= '[' <TERNARY> ']'
| '{' <GROUP> '}'
| '(' <PRECEDENCE> ')'
| <TKN_NAME>

<TERNARY> ::= <TERNARY_FACTOR> { ('?' <TERNARY_FACTOR> ':' <TERNARY_FACTOR>) | ('+' <TERNARY_FACTOR>) }

<TERNARY_FACTOR> ::= <GROUP> | <PRECEDENCE> | <TKN_NAME>

<GROUP> ::= <PROD_NAME> '{' <RULE> '}'

<PRECEDENCE> ::= <PROD_NAME> '(' <ASSOC> <PREC> ')'

<ASSOC> ::= ('L' | 'R' | 'N')

<PREC> ::= <INT>

<TKN_NAME> ::= 'tkn'_ <ID>

<ID> ::= [a-zA-Z]+[a-zA-Z0-9]*

<INT> ::= [0-9]+
#+end_src
