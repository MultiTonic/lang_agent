
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:
```bash
<folder> ::= prd_folder_tkn_grammar ':' tkn_A
                     { prd_folder_tkn_previousResults ':' tkn_D
                     ;  prd_folder_tkn_newExample ':' tkn_C
                     ;  prd_folder_tkn_createdNewOutput ':' tkn_D
                     ;  prd_folder_tkn_test ')' tkn_{'{' , '}'}
                     ;  prd_folder_tkn_ifGood '(' tkn_{'t', 'r', 'u', 'e'}
                     ;        prd_folder_tkn_repeatLoop ':' tkn_{'r', 'e', 'p', 'e', 'a', 't'}
                     ;        prd_folder_tkn_newD ':' tkn_D
                     ;    ')'
                     ;  prd_folder_tkn_otherwise '(' tkn_{'o', 't', 'h', 'e', 'r', 'w', 'i', 's', 'e'}
                     ;        prd_folder_tkn_feedError ':' tkn_error
                     ;    ')'
                     ;  prd_folder_tkn_upTo ':' tkn_up_to
                     ;  tkn_3 tkn_times
                     }
```
In this example, `prd_folder_tkn_grammar`, `prd_folder_tkn_previousResults`, etc. are the names of the rules that follow the naming convention you described. The tokens used in these rules, such as `tkn_A`, `tkn_D`, and `tkn_C`, are also named according to the convention.

I hope this helps! Let me know if you have any questions or need further clarification.
#+end_src
