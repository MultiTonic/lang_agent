
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar that follows the naming conventions you described:

<BNF\_GRAMMAR> ::= 'let' 'rec' <FOLD\_LEFT\_PROD> '='
<FOLD\_LEFT\_PROD> ::= 'fun' <ACC\_PROD> '->' <OP\_PROD> 'acc' '->'
<ARGS\_PROD> '->' <RESULT\_PROD>

<FOLD\_LEFT\_PROD> ::= prd\_fold\_left\_tkn\_prod
<ACC\_PROD> ::= prd\_acc\_tkn\_prod
<OP\_PROD> ::= prd\_op\_tkn\_prod
<ARGS\_PROD> ::= '[' <ELEMENT\_PROD>{',' <ELEMENT\_PROD>}* ']'
<ELEMENT\_PROD> ::= <VALUE\_PROD> | <FUNCTION\_PROD>
<VALUE\_PROD> ::= <TOKEN\_PROD> | <LIST\_PROD>
<FUNCTION\_PROD> ::= 'fun' <ARGS\_FUNCTION\_PROD> '->' <RESULT\_FUNCTION\_PROD>
<ARGS\_FUNCTION\_PROD> ::= '(' [ <VALUE\_PROD>{',' <VALUE\_PROD>}* ] ')'
<RESULT\_FUNCTION\_PROD> ::= <VALUE\_PROD>
<LIST\_PROD> ::= '[' <VALUE\_PROD>{',' <VALUE\_PROD>}* ']'
<TOKEN\_PROD> ::= prd\_tkn\_<name>

In this example, the non-terminal symbols are named using the conventions you described. For instance, the production for the `fold_left` function is named `prd_fold_left_tkn_prod`, and the production for a token is named `prd_tkn_<name>`. The specific names of the tokens (e.g., `grammar`, `A`, `D`, etc.) are not provided in this example, but they can be added as needed.

It's also worth noting that this EBNF grammar is more expressive and explicit than the original one because it includes productions for all of the different types of values that can appear in the function (tokens, lists, functions, etc.), and it uses non-terminal symbols to clearly distinguish between these different types. This makes the grammar easier to understand and use.
#+end_src
