
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```
<prd_folder_rules> ::= 
  'folder' '{' <prd_take_input_rules> '}'

<prd_take_input_rules> ::= 
  <prd_take_input_rule> { ';' <prd_take_input_rule> }

<prd_take_input_rule> ::= 
    'grammar' ':' <prd_identifier_tkn_grammar>
  | 'previous_results' ':' <prd_identifier_tkn_previous_results>
  | 'new_example' ':' <prd_identifier_tkn_new_example>
  | 'created_new_output' ':' <prd_identifier_tkn_created_new_output>
  | 'test' ':' <prd_identifier_tkn_test> ';'

<prd_identifier_tkn_grammar> ::= 'A'
<prd_identifier_tkn_previous_results> ::= 'D'
<prd_identifier_tkn_new_example> ::= 'C'
<prd_identifier_tkn_created_new_output> ::= 'D'
<prd_identifier_tkn_test> ::= 'B'
```
You can continue defining the other rules in the same way, using the `prd_` prefix for rules and the `tkn_` prefix for tokens. This will make your grammar more explicit and easier to understand.
#+end_src
