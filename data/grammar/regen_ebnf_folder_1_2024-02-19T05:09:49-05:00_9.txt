
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar that follows the naming conventions you described:
```sql
<prd_folder_rules> ::= <prd_take_inputs_rule> <prd_previous_results_rule> <prd_new_example_rule> <prd_start_rule>

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' ('grammar' ':' <tkn_identifier_rule>) ('Previous' 'Results' ':' <tkn_identifier_rule>) ('New' 'Example' ':' <tkn_identifier_rule>)

<prd_previous_results_rule> ::= 'Previous' 'Results' ':' <tkn_identifier_rule> 'initially,' <tkn_example_rule>

<prd_new_example_rule> ::= 'New' 'Example' ':' <tkn_identifier_rule>

<prd_start_rule> ::= 'start' 'with' <prd_this_following_code_rule>

<prd_this_following_code_rule> ::= <prd_let_rec_fold_left_rule>

<prd_let_rec_fold_left_rule> ::= 'let' 'rec' <tkn_identifier_rule> (' '|'\t')* 'op' (' '|'\t')* <tkn_identifier_rule> '=' 'function' <prd_function_rule>

<prd_function_rule> ::= '(' <prd_parameter_list_rule> ')' <prd_body_rule>

<prd_parameter_list_rule> ::= <tkn_identifier_rule> (',' <tkn_identifier_rule>) *

<prd_body_rule> ::= <prd_match_rule> | <prd_sequence_rule>

<prd_match_rule> ::= 'match' <tkn_expression_rule> 'with' <prd_pattern_list_rule>

<prd_pattern_list_rule> ::= <prd_pattern_rule> (| '<prd_pattern_rule>' )*

<prd_sequence_rule> ::= <prd_statement_list_rule>

<prd_statement_list_rule> ::= <prd_statement_rule> (';' <prd_statement_rule>) *

<prd_statement_rule> ::= <prd_simple_statement_rule> | <prd_compound_statement_rule>

<prd_simple_statement_rule> ::= <tkn_identifier_rule> (' '|'\t')* '=' (' '|'\t')* <tkn_expression_rule>

<prd_compound_statement_rule> ::= 'let' <prd_bindings_rule> 'in' <prd_expression_rule>

<prd_bindings_rule> ::= <prd_binding_rule> (';' <prd_binding_rule>) *

<prd_binding_rule> ::= <tkn_identifier_rule> (' '|'\t')* '=' (' '|'\t')* <prd_expression_rule>

<prd_expression_rule> ::= <prd_primitive_expression_rule> | <prd_if_expression_rule> | <prd_function_application_rule>

<prd_primitive_expression_rule> ::= <tkn_integer_rule> | <tkn_string_rule> | <tkn_boolean_rule>

<prd_if_expression_rule> ::= 'if' <tkn_expression_rule> 'then' <prd_expression_rule> 'else' <prd_expression_rule>

<prd_function_application_rule> ::= <tkn_identifier_rule> ('(' <prd_argument_list_rule> ')')

<prd_argument_list_rule> ::= <prd_expression_rule> (',' <prd_expression_rule>) *

<tkn_identifier_rule> ::= [a-zA-Z][a-zA-Z0-9]*

<tkn_integer_rule> ::= [0-9]+

<tkn_string_rule> ::= '"' <tkn_characters_rule> '"'

<tkn_characters_rule> ::= <tkn_character_rule> (<tkn_character_rule> | <escape_sequence_rule>) *

<tkn_character_rule> ::= any character except " or \ or newline

<escape_sequence_rule> ::= '\' <escaped_char>

<escaped_char> ::= 'n' | 'r' | 't' | '"'
```
This EBNF grammar defines the syntax for a language that is similar to the one described in your code, but with more explicit and detailed rules. Each token is prefixed with `tkn_`, and each production rule is prefixed with `prd_`. The names of the non-terminals are also more descriptive.

Please note that this is just an example and you might need to adjust it according to your needs, for instance, add or remove rules, change the order of them or even make some changes in the syntax of the language.
#+end_src
