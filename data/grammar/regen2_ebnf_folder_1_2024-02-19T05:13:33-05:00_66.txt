
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you could define your EBNF grammar with the naming conventions you described:
```
<prd_folder_rules> ::= <prd_take_inputs_rule> | <prd_created_new_output_rule> | <prd_test_rule> | <prd_start_with_code_rule>

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' ('grammar' ':' <tkn_A>) (';' <tkn_SEMI_COLON>) <prd_previous_results_rule> (';' <tkn_SEMI_COLON>) <prd_new_example_rule> (';' <tkn_SEMI_COLON>)

<prd_previous_results_rule> ::= 'Previous' 'Results' ':' ('D' <tkn_IDENTIFIER>)

<prd_initial_example_rule> ::= 'Initial' 'example' ':' ('B' <tkn_IDENTIFIER>)

<prd_new_example_rule> ::= 'New' 'Example' ':' ('C' <tkn_IDENTIFIER>)

<prd_created_new_output_rule> ::= 'Created' 'new' 'output' 'D'

<prd_test_rule> ::= 'Test' <tkn_D> '. If' 'good,' 'repeat' 'loop' 'with' 'new' 'D.' 'Otherwise' 'feed' 'error' 'back' 'to' 'create' 'new' 'D' 'up' 'to' '3' 'times.'

<prd_start_with_code_rule> ::= 'start' 'with' 'this' 'following' 'code' 'and' 'rewrite' 'it' 'to' 'suit' 'our' 'needs.'
```
In this example, I have defined a production rule for the entire `folder` component, which is made up of several other production rules. Each of these rules follows the naming convention you described, with the rule name starting with `prd_` and each token being named `tkn_<token_name>`.

You can continue defining the rest of your grammar in this way, making sure to follow the naming conventions you have specified.
#+end_src
