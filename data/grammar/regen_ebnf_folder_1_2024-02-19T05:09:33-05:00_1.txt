
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

EBNF Grammar:

prod\_folder ::= prd\_sequence\_tkn sequence (prd\_file\_tkn file)* .

prd\_sequence\_tkn ::= "SEQUENCE" .

prd\_file\_tkn ::= "FILE" .

file ::= identifier (prd\_parameters\_tkn parameters)? .

identifier ::= prd\_identifier\_tkn tkn\_letter (tkn\_letter | tkn\_digit)* .

prd\_parameters\_tkn ::= "PARAMETERS" .

parameters ::= (prd\_parameter\_tkn parameter)*.

parameter ::= identifier "=" value .

value ::= string | number | identifier .

prd\_identifier\_tkn ::= "TKN\_IDENTIFIER" .

tkn\_letter ::= ['a'-'z' 'A'-'Z'] .

tkn\_digit ::= ['0'-'9'] .

string ::= '"' (prd\_character\_tkn tkn\_anychar | prd\_escaped\_char)* '"' .

prd\_character\_tkn ::= "TKN\_CHARACTER" .

prd\_escaped\_char ::= "\\" tkn\_special .

tkn\_special ::= "n" | "r" | "'" | "\"" | "\\" .

number ::= prd\_integer\_tkn tkn\_digit+ (prd\_decimal\_tkn tkn\_digit+)? .

prd\_integer\_tkn ::= "TKN\_INTEGER" .
prd\_decimal\_tkn ::= "TKN\_DECIMAL" .

tkn\_anychar ::= any character except for double quote (")

This EBNF grammar follows the naming conventions you described, where each rule starts with "prd\_" and each token is called "tkn". It also defines a folder as a sequence of files, where each file has an identifier and optional parameters. The parameters are defined as a list of parameter rules, where each parameter consists of an identifier and a value. The value can be a string, number, or identifier.

You can then use this EBNF grammar to parse your input files and build the folder structure accordingly.
#+end_src
