
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

<bnf>
= ('\(' <prod> ')' -- begin non-terminal definition
| <prod_name> '=' <expr> ';' -- production rule
| <comment>

<prod_name> = 'prd'_ <identifier>

<expr>
= <term> { '|' <term> }

<term>
= <factor> { ('*' | '/') <factor> }

<factor>
= '<' <identifier> '>' -- terminal symbol (token)
| '[' <expr> ']'
| '{' <expr> '}'
| '(' <expr> ')'
| <prod_name>

<comment> = '(*' ~ ('*')* ~ '*)'

<identifier> = [a-zA-Z_] [a-zA-Z0-9_]*
</bnf>

In this EBNF grammar:

* A non-terminal is enclosed in parentheses and begins with a backslash.
* A production rule consists of a named symbol (<prod\_name>) followed by an equals sign, an expression, and a semicolon.
* A comment starts with '(*' and ends with '*)'.
* An identifier is a sequence of letters, digits, or underscores that starts with a letter or underscore.
* A terminal symbol (token) is enclosed in angle brackets.
* Expressions, terms, and factors are defined recursively using curly braces to indicate zero or more repetitions.
* The '|' symbol separates alternative expressions.
* Parentheses can be used to group expressions.

For example, you could define a production rule for a sequence of integers as follows:

prd_sequence_tkn_int = [0-9]+ ;
#+end_src
