
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```
(* EBNF grammar for a folder *)

(* A folder contains a list of files or subfolders *)
prd_folder     ::= '(' ( prd_file | prd_subfolder ) ')' *

(* A file has a name and content *)
prd_file       ::= tkn_FILE_NAME tkn_FILE_CONTENT

(* A subfolder has a name and contains a folder *)
prd_subfolder  ::= tkn_SUBFOLDER_NAME tkn_OPEN tkn_CLOSE prd_folder

(* File name token definition *)
tkn_FILE_NAME  ::= [a-zA-Z]+

(* File content token definition *)
tkn_FILE_CONTENT ::= .*

(* Subfolder open token definition *)
tkn_OPEN       ::= '['

(* Subfolder close token definition *)
tkn_CLOSE      ::= ']'
```

In this example, the `prd_*` naming convention is used for all rule names and the `tkn_*` naming convention is used for all token names. The underscore character is used to separate words in a name.

The `prd_folder` rule represents the top-level folder, which can contain any number of files or subfolders. The `prd_file` and `prd_subfolder` rules define the structure of a file and a subfolder, respectively.

The `tkn_*` rules define the tokens that are used in the other rules. In this example, there are tokens for the file name, file content, and subfolder open and close brackets. The `.*` pattern is used to match any character sequence (greedily) in the `tkn_FILE_CONTENT` rule.

I hope this helps! Let me know if you have any questions or need further clarification.
#+end_src
