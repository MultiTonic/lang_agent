
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```ebnf
<folder> ::= prd_folder_tkn_name '(' prd_folder_tkn_inputs ')' prd_folder_tkn_body

<prd_folder_tkn_inputs> ::= <grammar> ',' <previous_results> ',' <new_example>

<prd_folder_tkn_body> ::= <test> <loop>

<test> ::= prd_test_tkn_if_good '{' prd_test_tkn_repeat_loop '}'

<loop> ::= prd_loop_tkn_repeat '{' prd_loop_tkn_with_new '}'

<grammar> ::= tkn_A

<previous_results> ::= tkn_D initially, tkn_B

<new_example> ::= tkn_C

<test> ::= prd_test_tkn_created_output '{' tkn_D '}'

<prd_test_tkn_repeat_loop> ::= prd_repeat_loop_tkn_up_to_3_times '(' tkn_3 ')'

<loop> ::= prd_loop_tkn_feed_error '{' tkn_error '}'
```

This is just an example and can be adjusted to fit your specific needs. The key thing is that each rule starts with `prd_` and each token is prefixed with `tkn_`. Additionally, if a token is used in a rule, it is given the name `prd_<rule_name>_tkn_<token_name>` for easy identification.
#+end_src
