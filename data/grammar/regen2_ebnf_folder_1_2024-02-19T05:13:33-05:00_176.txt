
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you could define your EBNF grammar with the naming conventions you specified:
```
<prd_folder_tkn_input> ::= <prd_grammar_tkn_A> | <prd_previousResults_tkn_D> | <prd_initialExample_tkn_B> | <prd_newExample_tkn_C>
<prd_foldLeft_tkn_op> ::= <prd_function_tkn_name> | <prd_function_tkn_anonymous>
<prd_function_tkn_name> ::= <prd_identifier_tkn_name>
<prd_function_tkn_anonymous> ::= <prd_lambdaOperator_tkn_fn> <prd_parameters_tkn_params> <prd_arrowOperator_tkn_-> <prd_functionBody_tkn_body>
<prd_parameters_tkn_params> ::= <prd_identifier_tkn_param1> ... <prd_identifier_tkn_paramN>
<prd_functionBody_tkn_body> ::= <any valid expression or statement>
```
You can continue defining the rest of your grammar using this naming convention. This way, it will be more expressive and explicit as you desired.
#+end_src
