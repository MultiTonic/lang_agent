
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your detailed EBNF grammar with the specified naming rules:
```ebnf
<prd_folder_grammar> ::= 'folder' {prd_rule}

<prd_rule> ::= <prd_rule_name> ':' <prd_sequence> ';'

<prd_rule_name> ::= 'prd' identifier

<prd_sequence> ::= <prd_sequence_element> { ' ' <prd_sequence_element> }

<prd_sequence_element> ::=
  | <prd_token>
  | <prd_group>
  | <prd_option>
  | <prd_repeat>

<prd_token> ::= "'" character "'"

<prd_group> ::= '(' <prd_sequence> ')'

<prd_option> ::= '[' <prd_sequence> ']'

<prd_repeat> ::= '{' <prd_sequence> '}'

<prd_example> ::= <prd_example_type> ':' { <prd_token> } ';'

<prd_example_type> ::= 'Initial' | 'New'
```
And here's an example of how you can use this grammar to define a simple folder structure:
```ebnf
prd_Folder : 
  prd_file { " " prd_folder } ;

prd_file : 
  "'" . "</ext>" ;

prd_folder : 
  "{" prd_Folder "}" |
  "[" prd_Folder "]" |
  "(" prd_Folder ")";
```
You can then use this grammar and the `fold_left` function to parse and manipulate folder structures. Note that you will need to implement the `identifier`, `character`, and `ext` token definitions, as well as the logic for applying the `op` operation in the `fold_left` function.
#+end_src
