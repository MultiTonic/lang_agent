
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your detailed EBNF grammar with the specified naming conventions:

EBNF Grammar:

<folder> ::= prd\_folder\_tkn\_name ":" prd\_folder\_tkn\_leftBrace prd\_folder\_tkn\_grammar "," prd\_folder\_tkn\_previousResults "," prd\_folder\_tkn\_newExample prd\_folder\_tkn\_rightBrace prd\_folder\_tkn\_createdNewOutput prd\_folder\_tkn\_test prd\_folder\_tkn\_ifGood prd\_folder\_tkn\_repeatLoop

<grammar> ::= prd\_grammar\_tkn\_name ":" prd\_grammar\_tkn\_A

<previousResults> ::= prd\_previousResults\_tkn\_name ":" prd\_previousResults\_tkn\_D "initially," prd\_previousResults\_tkn\_initialExample ":" prd\_previousResults\_tkn\_B

<newExample> ::= prd\_newExample\_tkn\_name ":" prd\_newExample\_tkn\_C

<createdNewOutput> ::= prd\_createdNewOutput\_tkn\_name ":" prd\_createdNewOutput\_tkn\_D

<test> ::= prd\_test\_tkn\_name ":" prd\_test\_tkn\_ifGood prd\_test\_tkn\_repeatLoop "with" prd\_test\_tkn\_newD

<ifGood> ::= prd\_ifGood\_tkn\_name ":" prd\_ifGood\_tkn\_repeatLoop "with" prd\_ifGood\_tkn\_newD "otherwise" prd\_ifGood\_tkn\_feedError "back" prd\_ifGood\_tkn\_toCreateNewD "up" prd\_ifGood\_tkn\_to 3 "times."

<repeatLoop> ::= prd\_repeatLoop\_tkn\_name ":" prd\_repeatLoop\_tkn\_startWith prd\_repeatLoop\_tkn\_thisFollowingCode prd\_repeatLoop\_tkn\_rewrite "it" prd\_repeatLoop\_tkn\_toSuit "our" prd\_repeatLoop\_tkn\_needs

This EBNF grammar follows the naming conventions you specified, with each rule starting with "prd\_" and each token called "tkn\_". The tokens that are used in a rule have the format "prd\_<prod name>\_tkn\_<token name>".
#+end_src
