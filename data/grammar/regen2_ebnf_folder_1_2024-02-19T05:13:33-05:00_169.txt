
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:
```
<prd_folder_tkn_grammar> = <tkn_A>
<prd_folder_tkn_previousResults> = <tkn_D>
<prd_folder_tkn_initialExample> = <tkn_B>
<prd_folder_tkn_newExample> = <tkn_C>
<prd_folder_tkn_output> = <tkn_D>

<prd_test_tkn_action> = "Test" <prd_folder_tkn_output>
<prd_test_tkn_condition> = "If good"
<prd_test_tkn_loopAction> = repeat loop with new <prd_folder_tkn_output>
<prd_test_tkn_errorFeed> = "Otherwise feed error back to create new" <prd_folder_tkn_output> "up to 3 times."

<prd_start_tkn_action> = start with this following code
<prd_start_tkn_code> = <prd_folder_tkn_rules>

<prd_folder_tkn_rules> =
    <prd_rule_tkn_name> ":" <tkn_A>
    ";" <prd_takeInputs_tkn_action>
    <prd_takeInputs_tkn_code>
    ";" <prd_createdNewOutput_tkn_action>
    <prd_createdNewOutput_tkn_code>
    "."

<prd_takeInputs_tkn_action> = take inputs
<prd_takeInputs_tkn_inputs> =
    <tkn_grammar> ","
    <tkn_previousResults> ","
    <tkn_newExample>

<prd_createdNewOutput_tkn_action> = Created new output
<prd_createdNewOutput_tkn_output> = <tkn_D>

<prd_test_tkn_code> =
    <prd_if_tkn_condition>
    <prd_if_tkn_trueAction>
    <prd_if_tkn_falseAction>

<prd_if_tkn_condition> = "if" <prd_test_tkn_condition>
<prd_if_tkn_trueAction> = repeat loop with new <prd_folder_tkn_output>
<prd_if_tkn_falseAction> = feed error back to create new <prd_folder_tkn_output> up to 3 times
```
This is a more detailed and explicit version of your original code. It uses the naming conventions you described, with all rules starting with `prd_` and tokens being called `tkn`. Each token used in a rule is named `prd_<prod name>_tkn_<token name>`.

You can further expand on this by adding more rules, terminals and actions as per your requirement.
#+end_src
