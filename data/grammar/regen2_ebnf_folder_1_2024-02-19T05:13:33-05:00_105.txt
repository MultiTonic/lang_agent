
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```ebnf
<folder> ::= prd_folder_tkn_START { <rule> } prd_folder_tkn_END

<rule> ::= prd_rule_tkn_NAME '::=' <expr>

<expr> ::= <term> { ('|' <term>) }

<term> ::= <factor> [ '<' *number* '>' ]

<factor> ::= <sequence> [ '?' | '*' | '+' ]

<sequence> ::= '(' <expr> ')' | <symbol>

<symbol> ::= prd_symbol_tkn_NAME

<number> ::= *any non-negative integer*
```

Here, `prd_folder_tkn_START`, `prd_rule_tkn_NAME`, `prd_symbol_tkn_NAME` are the starting symbol, rule names, and token names respectively. The other symbols like `<expr>`, `<term>`, etc. are non-terminals in the grammar.

You can see that each rule starts with `prd_` followed by the name of the rule and similarly for tokens. Also, each symbol is defined in terms of other symbols or non-terminals, making it more explicit and expressive.
#+end_src
