
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you can define your EBNF grammar with the desired naming conventions:
```rust
<prd_folder_rules> ::= <prd_take_inputs_rule>
                      | <prd_created_new_output_rule>
                      | <prd_test_rule>
                      | <prd_start_with_code_rule>

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' tkn_grammar ',' tkn_previous_results ',' tkn_new_example ';'

<prd_created_new_output_rule> ::= 'Created' 'new' 'output' tkn_D '.'

<prd_test_rule> ::= 'Test' tkn_D '.' ('If' 'good,' 'repeat' 'loop' 'with' tkn_new_D '.' 'Otherwise' 'feed' 'error' 'back' 'to' 'create' 'new' tkn_D 'up' 'to' '3' 'times' '.' )?

<prd_start_with_code_rule> ::= 'start' 'with' this 'following' 'code' 'and' 'rewrite' 'it' 'to' 'suit' 'our' 'needs' '.'
```
You can continue defining the rest of your grammar in a similar fashion. This way, each rule and token is explicitly named according to your specifications.
#+end_src
