
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you can define your EBNF grammar with the specified naming conventions:
```rust
<prd_folder_rules> ::= <prd_take_inputs_rule> | <prd_created_new_output_rule> | <prd_test_rule> | <prd_start_with_code_rule>

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' ('grammar' ':' <tkn_grammar_tkn>) (';' <tkn_semicolon_tkn>)
                           ('Previous' 'Results' ':' <tkn_identifier_tkn>) (':=' <tkn_colonEqual_tkn>) (<tkn_identifier_tkn> | <tkn_stringLiteral_tkn>)
                           (';' <tkn_semicolon_tkn>)
                           ('New' 'Example' ':' <tkn_identifier_tkn>) (':=' <tkn_colonEqual_tkn>) (<tkn_identifier_tkn> | <tkn_stringLiteral_tkn>)
                           (';' <tkn_semicolon_tkn>)

<prd_created_new_output_rule> ::= 'Created' 'new' 'output' ':' <tkn_identifier_tkn> (';' <tkn_semicolon_tkn>)

<prd_test_rule> ::= 'Test' <tkn_identifier_tkn> ('.' <tkn_period_tkn>) ('If' 'good' ',' 'repeat' 'loop' 'with' 'new' <tkn_identifier_tkn>) (';' <tkn_semicolon_tkn>)
                   ('Otherwise' 'feed' 'error' 'back' 'to' 'create' 'new' <tkn_identifier_tkn> 'up' 'to' '3' 'times' '.' <tkn_period_tkn>)

<prd_start_with_code_rule> ::= 'start' 'with' <tkn_leftParenthesis_tkn> (<prd_folder_rules> | <tkn_identifier_tkn>) <tkn_rightParenthesis_tkn>
                               ('and' 'rewrite' 'it' 'to' 'suit' 'our' <tkn_possessivePronoun_tkn>)

<tkn_grammar_tkn> ::= 'A'
<tkn_semicolon_tkn> ::= ';'
<tkn_colonEqual_tkn> ::= ':='
<tkn_identifier_tkn> ::= [a-zA-Z_] [a-zA-Z0-9_]*
<tkn_stringLiteral_tkn> ::= '"' [^"]* '"'
<tkn_period_tkn> ::= '.'
<tkn_leftParenthesis_tkn> ::= '('
<tkn_rightParenthesis_tkn> ::= ')'
<tkn_possessivePronoun_tkn> ::= 'needs'
```
Note that this is just an example and you might need to adjust it based on the specific requirements of your system. Also, I assumed some token types based on the code snippet you provided, but you might have different token types in your actual grammar.
#+end_src
