
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define an EBNF grammar with the naming conventions you described:
```rust
prd_folder = (prd_take_inputs, prd_grammar, prd_previous_results, prd_new_example) : sequence ;

prd_take_inputs = "take inputs" : tkn_identifier,
                  prd_input_A : tkn_identifier,
                  prd_input_B : tkn_identifier,
                  prd_input_C : tkn_identifier,
                  prd_input_D : tkn_identifier ;

prd_grammar = "grammar" : tkn_identifier, prd_input_A : tkn_identifier ;

prd_previous_results = "Previous Results" : tkn_identifier, prd_input_D : tkn_identifier ;

prd_new_example = "New Example" : tkn_identifier, prd_input_C : tkn_identifier ;

prd_output = "Created new output" : tkn_identifier, prd_input_D : tkn_identifier ;

prd_test = "Test" : tkn_identifier, prd_input_D : tkn_identifier ;

prd_loop = sequence {
             prd_test : tkn_identifier,
             if_true : tkn_if_true,
             prd_repeat_loop : tkn_identifier,
             prd_feedback : tkn_identifier,
             prd_input_D : tkn_identifier,
             times : tkn_number,
           } ;

prd_start = "start with" : tkn_identifier,
            prd_code_rewrite : tkn_identifier,
            "and rewrite it" : tkn_identifier,
            "to suit our needs" : tkn_identifier ;
```
In this example, the non-terminal symbols (i.e., the rules) all start with `prd_` to indicate that they are productions. Each token is named using the format you described, such as `tkn_identifier` for an identifier token. For readability, I've used parentheses around the sequence of tokens in each rule.

Note that this is just one possible way to define your EBNF grammar with the naming conventions you described, and you may need to modify it further based on the specific requirements of your system.
#+end_src
