
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure, here is an example of how you could define an EBNF grammar with your specified naming conventions:

<PRODUCTIONS>
  : <production>
  ;

<production>
  : 'prd' IDENTIFIER ':' (<group> | <choice> | <seq> | <rep>)
  ;

<group>
  : '{' <productions> '}'
  ;

<choice>
  : '[' <productions> ']'
  ;

<seq>
  : '(' <productions> ')'
  ;

<rep>
  : '*' IDENTIFIER
  | '+' IDENTIFIER
  | '?' IDENTIFIER
  ;

<terminal>
  : 'tkn' IDENTIFIER
  ;

IDENTIFIER
  : [a-zA-Z_] [a-zA-Z0-9_]*
  ;

In this EBNF grammar, each production is named using the convention "prd\_<production\_name>". Tokens are named using the convention "tkn\_<token\_name>". If a token is used in a rule, it is referred to as "prd\_<production\_name>\_tkn\_<token\_name>".

For example, the production for a sequence of two terminals 'a' and 'b' would be written as:

prd\_seq\_1 : ( tkn\_a tkn\_b ) ;

You can use the fold\_left function to parse an input string using this EBNF grammar. The accumulator would be a parse tree, and the operator would combine the current production with the parse tree from the previous iteration of the fold\_left function. The base case for the recursion would be an empty list, which represents the end of the input string.
#+end_src
