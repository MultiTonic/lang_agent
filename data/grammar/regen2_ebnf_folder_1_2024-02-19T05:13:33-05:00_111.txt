
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your EBNF grammar with the specified naming conventions:
```rust
<prd_folder_rules> ::= 
  'folder' '{' <prd_take_inputs_rules> '}'

<prd_take_inputs_rules> ::= 
  <prd_take_input_rule> (';' <prd_take_input_rule>) *

<prd_take_input_rule> ::= 
  'take' 'inputs' ':' <prd_grammar_tkn_A>
    (' ' <prd_previous_results_tkn_D> ':' <prd_initial_example_tkn_B>) ?
    (' ' <prd_new_example_tkn_C> ':' <prd_created_new_output_tkn_D>) ?
  ';'

<prd_grammar_tkn_A> ::= 'A'
<prd_previous_results_tkn_D> ::= 'D'
<prd_initial_example_tkn_B> ::= 'B'
<prd_new_example_tkn_C> ::= 'C'
<prd_created_new_output_tkn_D> ::= 'D'
```
Note that the `?` symbol indicates that the preceding element is optional, and the `*` symbol indicates that the preceding element can be repeated any number of times. The `::=` symbol is used to define a non-terminal symbol, and the `|` symbol is used to separate alternative productions for a non-terminal symbol.

You can use this EBNF grammar as a starting point and extend it to include additional rules and tokens as needed. Just make sure to follow the naming conventions you specified (e.g., using `prd_` as a prefix for production names, and `tkn_` as a prefix for token names).
#+end_src
