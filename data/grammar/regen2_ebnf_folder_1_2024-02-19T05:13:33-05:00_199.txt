
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:
```rust
<prd_folder_start> ::= 'folder' <tnk_openBrace> { <prd_file_definition> } <tnk_closeBrace>

<prd_file_definition> ::= <prd_filename_assignment> <tnk_semicolon>

<prd_filename_assignment> ::= <prd_identifier_tkn_identifier> '=' <prd_string_literal>

<prd_folder_contains> ::= <prd_file_definition> | <prd_folder>

{...}
```
In this example, `prd_` is added to the beginning of each rule name, and `tkn_` is added before each token. For example, the rule for starting a folder is named `<prd_folder_start>`, and it consists of the token 'folder' (`<tnk_folder>`), the open brace token (`<tnk_openBrace>`), zero or more file definitions (`{ <prd_file_definition> }`), and the close brace token (`<tnk_closeBrace>`).

You can continue defining the rest of your grammar using this naming convention. It will make it easier to understand and maintain as it grows in complexity.
#+end_src
