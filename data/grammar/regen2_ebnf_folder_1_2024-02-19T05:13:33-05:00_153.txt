
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's the updated code following your naming conventions:

```ebnf
(*
  take inputs :
    - grammar : A
    - Previous Results : D initially, Initial example : B
    - New Example : C
    - Created new output D.
    - Test D. If good, repeat loop with new D. Otherwise feed error back to create new D up to 3 times.
  start with this following code and rewrite it to suit our needs.
*)

module EBNF = struct
  type token = Tkn of string
  type rule_name = Prd of string
  type rule = Rule of (rule_name * expression) list
  and expression =
    | Empty
    | Token of token
    | Seq of expression list
    | Alt of expression list
    | Rep of expression * int option
    | Opt of expression
    | PrdRef of rule_name
end

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t

let rec string_of_expression expr =
  match expr with
  | EBNF.Empty           -> "empty"
  | EBNF.Token (Tkn s)  -> prd_tkn_str s
  | EBNF.Seq es          -> "(" ^ String.concat " " (List.map string_of_expression es) ^ ")"
  | EBNF.Alt es          -> "{" ^ String.concat "}" (List.map string_of_expression es) ^ "}"
  | EBNF.Rep (e, None)   -> prd_rep_str e "?"
  | EBNF.Rep (e, Some n)  -> prd_rep_str e ("*" ^ string_of_int n)
  | EBNF.Opt e           -> prd_opt_str e
  | EBNF.PrdRef r        -> prd_ref_str r
and prd_tkn_str s = "prd_tkn_" ^ s
and prd_rep_str e count = "prd_rep_" ^ string_of_rule_name e ^ "_" ^ count
and prd_opt_str e = "prd_opt_" ^ string_of_rule_name e
and prd_ref_str r = string_of_rule_name r
and string_of_rule_name (EBNF.Prd n) = "prd_" ^ n
end
```

This code includes the EBNF abstract syntax definition and some utility functions adapted to follow your desired naming conventions. Note that this is only a modification of the original provided code, so it might not fit your specific needs for the bootstrapping process.
#+end_src
