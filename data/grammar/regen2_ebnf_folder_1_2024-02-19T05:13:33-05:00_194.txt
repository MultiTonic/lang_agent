
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure, here is an example of how you could define an EBNF grammar with the naming conventions you described:

<code>

%left RECURSIVE

prod\_folder = 'folder', { prd\_inner\_item };
prd\_inner\_item = prd\_file | prd\_subfolder;
prd\_file = 'file', tkn\_filename, { tkn\_content };
prd\_subfolder = 'subfolder', tkn\_foldername, prd\_folder;

tkn\_filename = <ASCII letter or digit or \_ or ->;
tkn\_foldername = <ASCII letter or digit or \_ or ->;
tkn\_content = <any character except newline>;

</code>

In this example, the `prod_` prefix is added to each rule name, and the `tkn_` prefix is added to each token name. The tokens used in a rule have the format `prd_*rule\_name*_tkn_*token_name*`. The `%left RECURSIVE` directive is used to indicate that the `prd_inner_item` rule can be recursively defined.

You can then use this EBNF grammar to parse input strings and check if they match the specified structure. For example, you could use a parser generator like Menhir or OCamllex to generate a parser from the EBNF grammar and then use it to parse input strings.

Let me know if you have any questions about this example or need further clarification.
#+end_src
