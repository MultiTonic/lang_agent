
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:
```rust
<prd_folder_rules> ::= 
  'take' 'inputs' ':' <prd_input_specification_tkn_grammar> ';'
                     <prd_input_specification_tkn_previous_results> ':' <prd_input_specification_tkn_D> ';'
                     <prd_input_specification_tkn_new_example> ':' <prd_input_specification_tkn_C> ';'
                     <prd_input_specification_tkn_created_new_output> ':' <prd_input_specification_tkn_D> ';'
                     <prd_input_specification_tkn_test> ';'
                     <prd_input_specification_tkn_if_good> ':' <prd_input_specification_tkn_repeat_loop> ';'
                     <prd_input_specification_tkn_otherwise> ':' <prd_input_specification_tkn_feed_error> ';'
                     <prd_input_specification_tkn_create_new_D> ':' <prd_input_specification_tkn_up_to_3_times> ';'
                     <prd_input_specification_tkn_start> '{' <prd_folder_rules> '}'

<prd_input_specification_tkn_grammar> ::= <tnk_A>
<prd_input_specification_tkn_previous_results> ::= <tnk_D>
<prd_input_specification_tkn_new_example> ::= <tnk_C>
<prd_input_specification_tkn_created_new_output> ::= <tnk_D>
<prd_input_specification_tkn_test> ::= <tnk_TEST>
<prd_input_specification_tkn_if_good> ::= <tnk_IF>
<prd_input_specification_tkn_repeat_loop> ::= <tnk_REPEAT>
<prd_input_specification_tkn_otherwise> ::= <tnk_OTHERWISE>
<prd_input_specification_tkn_create_new_D> ::= <tnk_CREATE>
<prd_input_specification_tkn_up_to_3_times> ::= <tnk_UPTO> <tnk_THREE> <tnk_TIMES>
<prd_input_specification_tkn_start> ::= <tnk_START>
```
This is just an example, you can add or remove rules and tokens as needed. Also note that this is not a complete EBNF grammar but it should give you an idea of how to implement the naming conventions you described.
#+end_src
