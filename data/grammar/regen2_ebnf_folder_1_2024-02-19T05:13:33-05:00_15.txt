
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your EBNF grammar with the naming conventions you specified:

```ebnf
<folder> ::= prd_folder_tkn_grammar ':' tkn_A
                  { prd_folder_tkn_previous_results ':' tkn_D ',' }
                  prd_folder_tkn_new_example ':' tkn_C
                  prd_folder_tkn_created_new_output ':' tkn_D
                  prd_folder_tkn_test ':' tkn_D
                  { prd_folder_tkn_if_good ',' tkn_repeat_loop ',' tkn_new_D }
                  prd_folder_tkn_start_with ':' tkn_{function | h :: t}
                  prd_folder_tkn_rewrite ':' tkn_it '{' tkn_to '}'
                  prd_folder_tkn_suitable_needs '.'

<prd_folder_tkn_grammar> ::= 'grammar'
<tkn_A> ::= <letter> { <letter> | <digit> }
<prd_folder_tkn_previous_results> ::= 'Previous Results'
<tkn_D> ::= <letter> { <letter> | <digit> }
<prd_folder_tkn_new_example> ::= 'New Example'
<tkn_C> ::= <letter> { <letter> | <digit> }
<prd_folder_tkn_created_new_output> ::= 'Created new output'
<tkn_D> ::= <letter> { <letter> | <digit> }
<prd_folder_tkn_test> ::= 'Test'
<tkn_D> ::= <letter> { <letter> | <digit> }
<prd_folder_tkn_if_good> ::= 'If good'
<tkn_repeat_loop> ::= 'repeat loop'
<tkn_new_D> ::= <letter> { <letter> | <digit> }
<prd_folder_tkn_start_with> ::= 'start with'
<tkn_{function | h :: t}> ::= 'function' | '|' 'h' '::' 't'
<prd_folder_tkn_rewrite> ::= 'rewrite'
<tkn_it> ::= 'it'
<tkn_to> ::= '{' 'to' '}'
<prd_folder_tkn_suitable_needs> ::= 'suitable needs'
<tkn_dot> ::= '.'
```

Here, I have defined the `<folder>` production rule which is the main rule that describes the structure of a folder. It consists of several sub-rules, each with their own name and token. The tokens are defined using other basic rules such as `<letter>` and `<digit>`.

Please note that this is just an example, you can modify it according to your needs and use cases.
#+end_src
