
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar that follows the naming conventions you specified:

<BNF\_GRAMMAR> ::= { <production\_rule> }

<PRODUCTION\_RULE> ::= "prd" <rule\_name> "=" <rule\_expr> ";"

<RULE\_NAME> ::= <letter> { <letter> | <digit> }

<LETTER> ::= "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z"

<RULE\_EXPR> ::= <seq\_expr> | <alt\_expr> | <opt\_expr> | <loop\_expr>

<SEQUENCE\_EXPR> ::= <term> { <term> }

<TERM> ::= <prod\_name> | <token>

<TOKEN> ::= "prd\_" <rule\_name> "\_tkn\_" <token\_name>

<ALTERNATIVE\_EXPR> ::= "|" <term> { "|" <term> }

<OPTIONAL\_EXPR> ::="?" <term>

<LOOP\_EXPR> ::="*" <term> | "+" <term>

This EBNF grammar defines the structure of a BNF grammar where each production rule has a name that starts with "prd" and each token used in a rule is named using the format "prd\_<rule\_name>\_tkn\_<token\_name>". It also includes non-terminals for different types of expressions such as sequences, alternatives, optionals, and loops.

Please note that this is just an example and you might need to adjust it to fit your specific use case. For example, the format of the token name or the set of allowed characters in rule names might need to be changed.
#+end_src
