
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure, here's an example of how you could define your EBNF grammar with the naming conventions you described:
```ebnf
<prd_folder_tkn_grammar> = A ;
<prd_folder_tkn_previous_results> = D ;
<prd_folder_tkn_initial_example> = B ;
<prd_folder_tkn_new_example> = C ;

<prd_folder_tkn_output> = <prd_process_tkn_input>;

<prd_process_tkn_input> =
  'let' 'rec' <prd_process_tkn_fold_left_identifier> '=' <prd_process_tkn_op_identifier>
  <prd_process_tkn_acc_identifier> '=' <prd_process_tkn_function_identifier> ':'
  <prd_process_tkn_function_params_identifier> 'in' <br/>
  ( <prd_process_tkn_op_identifier> <prd_process_tkn_acc_identifier> <prd_process_tkn_h_identifier> | <prd_process_tkn_empty_identifier> ) <br/>
  'fold_left' <prd_process_tkn_op_identifier>
  (<prd_process_tkn_acc_identifier> '(' <prd_process_tkn_op_identifier> <prd_process_tkn_acc_identifier> <prd_process_tkn_h_identifier> ')')
  <br/>
  't' ;

<prd_process_tkn_fold_left_identifier> = 'fold_left' ;
<prd_process_tkn_op_identifier> = OP ;
<prd_process_tkn_acc_identifier> = ACC ;
<prd_process_tkn_function_identifier> = FUNCTION ;
<prd_process_tkn_function_params_identifier> = PARAMS ;
<prd_process_tkn_empty_identifier> = '[]' ;
<prd_process_tkn_h_identifier> = H ;
<prd_process_tkn_br> = '<br/>' ;
```
In this example, we have defined the `fold_left` function using your specified naming conventions. We have also added some additional rules to define the various identifiers and other elements used in the `fold_left` definition. Note that we have used the `<br/>` element to represent line breaks in the EBNF syntax, as this is a common convention for defining multi-line grammar rules.

Of course, you may need to modify or extend this example further to suit your specific needs. But hopefully this gives you a good starting point for creating a more expressive and explicit EBNF grammar using your naming conventions.
#+end_src
