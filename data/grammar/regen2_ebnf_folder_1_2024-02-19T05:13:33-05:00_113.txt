
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```ebnf
<folder> ::= prd_folder_tkn_name ':' prd_folder_tkn_inputs '[' <sequenceOfInputs> ']'

<sequenceOfInputs> ::= <input> {',' <input>}

<input> ::= prd_input_tkn_grammar ':' <identifier>
         | prd_input_tkn_previousResults ':' <identifier>
         | prd_input_tkn_newExample ':' <identifier>

<identifier> ::= [a-zA-Z_] [a-zA-Z0-9_]*
```

In this EBNF grammar, `folder` is the start symbol and represents a folder that takes inputs as a list enclosed in square brackets. Each input is represented by one of three possible alternatives: grammar, previousResults, or newExample, each associated with an identifier. The use of the naming convention you described makes it clear what each non-terminal and terminal symbol represents.

Note that this EBNF grammar does not include all the details of your initial code snippet, such as the looping and error handling behavior. However, it should provide a solid foundation for building a more detailed grammar with those features included.
#+end_src
