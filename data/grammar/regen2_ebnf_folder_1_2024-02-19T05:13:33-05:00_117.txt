
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you might define your EBNF grammar with the naming conventions you described:
```
<prd_folder_rules> ::= 
 'folder' '{' <prd_take_inputs_rules> '}'

<prd_take_inputs_rules> ::= 
 'take' '(' <prd_grammar_token> ',' <prd_previous_results_token> ',' <prd_new_example_token> ')'

<prd_grammar_token> ::= 
 'grm_tkn_grammar'

<prd_previous_results_token> ::= 
 'prd_tkn_previous_results'

<prd_initial_example_token> ::= 
 'prd_tkn_initial_example'

<prd_new_example_token> ::= 
 'prd_tkn_new_example'

<prd_created_output_token> ::= 
 'prd_tkn_created_output'

<prd_test_rules> ::= 
 'test' <prd_created_output_token> '.'

<prd_if_good_rules> ::= 
 'if' <prd_test_results_token> 'repeat' <prd_take_inputs_rules>

<prd_error_feedback_rules> ::= 
 'otherwise' 'feed' 'error' 'back' 'to' 'create' 'new' <prd_created_output_token>
#+end_src
