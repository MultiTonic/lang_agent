
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you specified:

```ebnf
<folder> ::= prd_folder_tkn_grammar ':' tkn_A
            | prd_folder_tkn_previousResults ':' tkn_D
            | prd_folder_tkn_newExample ':' tkn_C
            | prd_folder_tkn_createdNewOutput ':' tkn_D
            | prd_folder_tkn_test ':' tkn_D
            | prd_folder_tkn_ifGood ':' tkn_condition
            | prd_folder_tkn_repeatLoop ':' tkn_times
            | prd_folder_tkn_startWith ':' tkn_code
            | prd_folder_tkn_rewrite ':' tkn_code
            | prd_folder_tkn_suitableNeeds '.'

<condition> ::= prd_condition_tkn_good ',' tkn_repeatLoop
                  | prd_condition_tkn_otherwise ',' tkn_feedError
                  | prd_condition_tkn_createNewD ':' tkn_D
                  | prd_condition_tkn_upTo ':' tkn_threeTimes

<times> ::= tkn_threeTimes
```

You can continue defining the rest of your grammar in a similar fashion. This is just an example and you might need to adjust it based on your specific requirements.
#+end_src
