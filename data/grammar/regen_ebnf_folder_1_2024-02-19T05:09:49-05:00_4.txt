
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```
(* EBNF grammar for a folder *)

(* A folder contains a list of files or other folders *)
prd_folder_tkn_name = 'folder' ;
prd_folder_tkn_contents = ( prd_file_tkn_name
                           | prd_folder_tkn_name )* ;

prd_file_tkn_name = 'file' ;
prd_file_tkn_contents = <any string that is not a file or folder name> ;

fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
```

In this example, the `prd_folder_tkn_name` and `prd_file_tkn_name` rules define the names of a folder and file, respectively. The `prd_folder_tkn_contents` and `prd_file_tkn_contents` rules define the contents of a folder or file.

I hope this helps! Let me know if you have any questions or need further clarification.
#+end_src
