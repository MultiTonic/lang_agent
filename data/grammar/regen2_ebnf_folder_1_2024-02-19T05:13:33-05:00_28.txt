
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

<bnf>
 := { <production> }

<production>
 := 'prd_' <prod-name> '[' [ <options> ] ']' <seq-of-symbols> ';'

<options>
 := { <option> }

<option>
 := 'opt_' <option-name>

<seq-of-symbols>
 := <symbol> { <symbol> }

<symbol>
 := <terminal> | <non-terminal>

<terminal>
 := 'tkn_' <token-name>

<non-terminal>
 := 'prd_' <prod-name>

</bnf>

This EBNF grammar defines the structure of a set of productions, where each production has a name (<prod-name>) and a sequence of symbols, which can be either terminals or non-terminals. The '[' and ']' characters are used to enclose any optional elements in the production.

The '<options>' production allows for zero or more options to be specified for a given production, each of which has a name (<option-name>).

The '<seq-of-symbols>' production defines a sequence of symbols, which can consist of one or more symbols (<symbol>).

The '<symbol>' production allows for either a terminal or a non-terminal to be used. A terminal is represented by the 'tkn_' prefix followed by the name of the token (<token-name>), while a non-terminal is represented by the 'prd_' prefix followed by the name of the production (<prod-name>).

By using these naming conventions, you can ensure that all of your rules and tokens are easily identifiable and consistently named throughout your EBNF grammar.
#+end_src
