
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your detailed EBNF grammar with the requested naming conventions:
```rust
<prd_folder_rules> ::= 
  'folder'
  'take'
  <prd_input_data>
  <prd_previous_results>
  <prd_new_example>
  <prd_processed_data>
  <prd_test_output>
  <prd_loop_condition>
  <prd_final_result>

<prd_input_data> ::= 'grammar' tkn_A | 'Previous Results' tkn_D | 'New Example' tkn_C

<prd_previous_results> ::= tkn_D

<prd_new_example> ::= tkn_C

<prd_processed_data> ::= tkn_D'

<prd_test_output> ::= 'Test'

<prd_loop_condition> ::= <prd_processed_data> 'If good' <prd_repeat_loop> | <prd_error_handling>

<prd_repeat_loop> ::= 'repeat loop' <prd_processed_data>

<prd_final_result> ::= tkn_D''

<prd_error_handling> ::= 'otherwise feed error' <prd_processed_data> 'up to 3 times'
```
Note: I have used `tkn_A`, `tkn_B`, etc. as placeholders for the actual tokens, you would need to replace them with the appropriate values in your implementation.
#+end_src
