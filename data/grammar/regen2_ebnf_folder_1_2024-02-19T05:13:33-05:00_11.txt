
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your detailed EBNF grammar for the given requirements:
```ebnf
(* A production is defined as follows:
   prd_<prod-name> -> <rhs1> | <rhs2> ... | <rhsN>;
*)

productions := [ prd | prd_<prod-name> -> <rule>; ];

rule := prod_ref { '|' prod_ref } ';';

prod_ref := '<' identifier '>';

identifier := [a-zA-Z]+ [a-zA-Z0-9]*;

(* Terminals are defined as follows:
   tkn_<token-name> : <token-value>;
*)

terminals := [ tkn | tkn_<token-name> : <constant>; ];

constant := '"' ( ~'"' )* '"'  // for string literals
          | <any other character or sequence of characters representing a terminal value> ;
```
Here, `prd_<prod-name>` represents the name of a production, and `tkn_<token-name>` represents the name of a token. The `<rule>` component is defined recursively as one or more productions separated by the `|` symbol. Each `<prod_ref>` refers to a previously defined production using its name (e.g., `<identifier>`).

The `<terminals>` section defines a list of named tokens and their corresponding values, where `<constant>` can be any sequence of characters representing the terminal value. Note that you may need to modify the definition of `<constant>` depending on the syntax for specifying token values in your system.

This grammar should provide a good starting point for defining your detailed EBNF grammar with naming conventions as specified.
#+end_src
