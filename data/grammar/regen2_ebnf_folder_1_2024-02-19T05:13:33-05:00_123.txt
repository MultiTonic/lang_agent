
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```
<prd_folder_rules> ::= 
  'folder'
  'take'
  <prd_input_rules>
  <prd_separator_rules>
  'grammar'
  <prd_identifier_tkn_grammar>
  <prd_separator_rules>
  'Previous Results'
  <prd_identifier_tkn_previousResults>
  <prd_separator_rules>
  'Initial example'
  <prd_identifier_tkn_initialExample>
  <prd_separator_rules>
  'New Example'
  <prd_identifier_tkn_newExample>
  <prd_separator_rules>
  'Created new output'
  <prd_identifier_tkn_createdNewOutput>
  <prd_separator_rules>
  'Test'
  <prd_identifier_tkn_test>
  <prd_separator_rules>
  'If good'
  <prd_identifier_tkn_ifGood>
  <prd_separator_rules>
  'repeat loop'
  <prd_identifier_tkn_repeatLoop>
  <prd_separator_rules>
  'with new'
  <prd_identifier_tkn_withNew>
  <prd_separator_rules>
  'Otherwise'
  <prd_identifier_tkn_otherwise>
  <prd_separator_rules>
  'feed error'
  <prd_identifier_tkn_feedError>
  <prd_separator_rules>
  'create new'
  <prd_identifier_tkn_createNew>
  <prd_separator_rules>
  'up to'
  <prd_identifier_tkn_upTo>
  <prd_separator_rules>
  '3 times'
  <prd_number_tkn_3>
  <prd_separator_rules>
  'start'
  <prd_identifier_tkn_start>
  <prd_separator_rules>
  <prd_codeBlock_rules>

<prd_input_rules> ::= 
  <prd_identifier_tkn_inputs>
  ':'
  <prd_separator_rules>

<prd_separator_rules> ::= 
  <prd_whitespace_rules>*
  ';'
  <prd_whitespace_rules>*

<prd_codeBlock_rules> ::= 
  '{'
  <prd_codeLines_rules>*
  '}'

<prd_codeLines_rules> ::= 
  <prd_whitespace_rules>*
  <prd_codeLine_rules>
  <prd_whitespace_rules>*
  <prd_lineBreak_rules>

<prd_codeLine_rules> ::= 
  <prd_expression_rules>

<prd_expression_rules> ::= 
  <prd_sequence_rules>
  | <prd_alternative_rules>
  | <prd_option_rules>
  | <prd_group_rules>
  | <prd_repeat_rules>

<prd_sequence_rules> ::= 
  <prd_expression_rules>
  <prd_sequencePart_rules>
  <prd_expression_rules>

<prd_sequencePart_rules> ::= 
  ','
  | <prd_whitespace_rules>+

<prd_alternative_rules> ::= 
  '|'
  <prd_expression_rules>

<prd_option_rules> ::= 
  '['
  <prd_expression_rules>
  ']'

<prd_group_rules> ::= 
  '('
  <prd_expression_rules>
  ')'

<prd_repeat_rules> ::= 
  '{'
  <prd_number_tkn_0_1>
  '..'
  <prd_number_tkn_0_100>
  '}'
  <prd_expression_rules>

<prd_whitespace_rules> ::= 
  ' '
  | '\t'

<prd_lineBreak_rules> ::= 
  '\r\n'
  | '\n'
  | '\r'

<prd_identifier_tkn_grammar> ::= 
  'A'

<prd_identifier_tkn_previousResults> ::= 
  'D'

<prd_identifier_tkn_initialExample> ::= 
  'B'

<prd_identifier_tkn_newExample> ::= 
  'C'

<prd_identifier_tkn_createdNewOutput> ::= 
  'D'

<prd_identifier_tkn_test> ::= 
  'test'

<prd_identifier_tkn_ifGood> ::= 
  'good'

<prd_identifier_tkn_repeatLoop> ::= 
  'repeatLoop'

<prd_identifier_tkn_withNew> ::= 
  'withNew'

<prd_identifier_tkn_otherwise> ::= 
  'otherwise'

<prd_identifier_tkn_feedError> ::= 
  'feedError'

<prd_identifier_tkn_createNew> ::= 
  'createNew'

<prd_identifier_tkn_upTo> ::= 
  'upTo'

<prd_number_tkn_3> ::= 
  '3'

<prd_number_tkn_0_1> ::= 
  '0'
  | '1'

<prd_number_tkn_0_100> ::= 
  <prd_number_tkn_0_1>
  | <prd_number_tkn_2_9>
  | <prd_number_tkn_10_99>

<prd_number_tkn_2_9> ::= 
  '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'

<prd_number_tkn_10_99> ::= 
  <prd_number_tkn_1_9>
  <prd_number_tkn_0_9>

<prd_number_tkn_1_9> ::= 
  '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'

<prd_number_tkn_0_9> ::= 
  '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'
```
#+end_src
