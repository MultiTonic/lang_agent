
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you specified:

```
<prd_folder_rules> ::= 
  'folder' '{' <prd_take_inputs_rules> '}'

<prd_take_inputs_rules> ::= 
  'take' 'inputs' ':' <prd_grammar_token> <prd_previous_results_token> <prd_new_example_token>

<prd_grammar_token> ::= 
  'grammar' ':' <tkn_identifier>

<prd_previous_results_token> ::= 
  'Previous' 'Results' ':' <tkn_identifier>

<prd_initial_example_token> ::= 
  'Initial' 'example' ':' <tkn_identifier>

<prd_new_example_token> ::= 
  'New' 'Example' ':' <tkn_identifier>

<prd_created_new_output_token> ::= 
  'Created' 'new' 'output' <tkn_identifier> '.'

<prd_test_token> ::= 
  'Test' <tkn_identifier> '.'

<prd_if_good_token> ::= 
  'If' 'good' <prd_repeat_loop_token>

<prd_otherwise_token> ::= 
  'Otherwise' <prd_feed_error_back_to_create_new_D_token> 'up' <tkn_number> 'times.'

<prd_start_with_token> ::= 
  'start' 'with' <prd_folder_rules> 'and' <prd_rewrite_it_to_suit_needs_token>.

<prd_repeat_loop_token> ::= 
  'repeat' 'loop' 'with' <tkn_identifier>.

<prd_feed_error_back_to_create_new_D_token> ::= 
  'feed' 'error' 'back' 'to' 'create' 'new' <tkn_identifier> 'up' <tkn_number> 'times.'
```

In this example, `<prd_..._rules>` are production rules that start with "prd" as requested. Each token in the grammar is also named according to the convention you specified, with `<prd_..._token>` for non-terminal tokens and `<tkn_...>` for terminal tokens.

You can use a parser generator like ANTLR, Yacc, or Bison to generate a parser from this EBNF grammar. The parser will be able to parse input strings according to the defined grammar and return a parse tree that you can then traverse to extract the necessary information and perform any required actions.
#+end_src
