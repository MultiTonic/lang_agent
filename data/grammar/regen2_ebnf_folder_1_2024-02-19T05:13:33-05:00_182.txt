
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure, here is an example of an EBNF grammar with the requested naming conventions:

<PRODUCTIONS>
    ::= <production>*

<production>
    ::= 'prd_' <prod\_name> ':' <rule>+

<rule>
    ::= <token> | <sequence> | <choice> | <iteration> | <grouping> | <optional>

<token>
    ::= 'prd_' <prod\_name> '_tkn_' <token\_name>

<sequence>
    ::= '<' <rule>* '>'

<choice>
    ::= '{' <rule> ( '|' <rule> )* '}'

<iteration>
    ::= '[' <rule> ']'

<grouping>
    ::= '(' <rule> ')'

<optional>
    ::= '?' <rule>

<PROD\_NAME>
    ::= [A-Za-z_] [A-Za-z0-9\_]*

<TOKEN\_NAME>
    ::= [A-Za-z_] [A-Za-z0-9\_]*

And here is an example of how you could use this EBNF grammar to define the behavior of a folder:

<PRODUCTIONS>
    prd_folder : tkn_take_inputs, tkn_grammar, tkn_previous\_results, tkn_new\_example;

<RULES>
    tkn\_take\_inputs
        ::= 'take' 'inputs' ':' <sequence>;
    tkn\_grammar
        ::= 'grammar' ':' tkn\_identifier;
    tkn\_previous\_results
        ::= 'Previous' 'Results' ':' tkn\_identifier;
    tkn\_new\_example
        ::= 'New' 'Example' ':' tkn\_identifier;

<SEQUENCE>
    <tkn_take_inputs> ',' <tkn_grammar> ',' <tkn_previous_results> ',' <tkn_new_example>;

<IDENTIFIER>
    prd_identifier : [A-Za-z_] [A-Za-z0-9\_]* ;

In this example, `prd_folder` is the name of the production that defines the behavior of a folder. It consists of four rules: `tkn_take_inputs`, `tkn_grammar`, `tkn_previous_results`, and `tkn_new_example`. These rules are defined as tokens because they do not consist of any other rules. The sequence rule specifies the order in which these rules should appear, separated by commas.

The `prd_identifier` production is used to define the names of the other productions and tokens. It consists of a letter or underscore followed by any number of letters, digits, or underscores.

I hope this helps! Let me know if you have any questions.
#+end_src
