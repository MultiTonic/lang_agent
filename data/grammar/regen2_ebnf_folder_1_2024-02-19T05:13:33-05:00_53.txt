
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your EBNF grammar with the requested naming conventions:
```bash
<prd_folder_rules> ::= <prd_take_inputs_rule> <prd_created_new_output_rule>+

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' '{' <prd_grammar_tkn_name> ',' <prd_previous_results_tkn_name> ',' <prd_new_example_tkn_name> '}'

<prd_grammar_tkn_name> ::= 'A'

<prd_previous_results_tkn_name> ::= 'D'

<prd_new_example_tkn_name> ::= 'C'

<prd_created_new_output_rule> ::= <prd_test_rule> <prd_if_good_rule> <prd_start_loop_rule>

<prd_test_rule> ::= 'Test' <prd_D_tkn_name> '.'

<prd_D_tkn_name> ::= 'D'

<prd_if_good_rule> ::= 'If' <prd_good_tkn_name> ',' <prd_repeat_loop_rule> '{' <prd_fold_left_rule> '}'

<prd_good_tkn_name> ::= 'good'

<prd_repeat_loop_rule> ::= 'repeat' 'loop' 'with' 'new' <prd_D_tkn_name> '.'

<prd_fold_left_rule> ::= <prd_op_tkn_name> <prd_acc_tkn_name> '=' <prd_op_tkn_name> '(' <prd_acc_tkn_name> ',' <prd_h_tkn_name> ')'

<prd_op_tkn_name> ::= 'op'

<prd_acc_tkn_name> ::= 'acc'

<prd_h_tkn_name> ::= 'h'

<prd_start_loop_rule> ::= 'start' 'with' <prd_this_following_code_tkn_name> 'and' <prd_rewrite_it_to_suit_needs_tkn_name> '.'

<prd_this_following_code_tkn_name> ::= 'this' 'following' 'code'

<prd_rewrite_it_to_suit_needs_tkn_name> ::= 'rewrite' 'it' 'to' 'suit' 'needs'
```
You can continue defining the rest of the rules in a similar manner, using the `prd_*` naming convention for rules and the `tkn_*` naming convention for tokens.
#+end_src
