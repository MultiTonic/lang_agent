
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed and self expressive.
Here is the code we wrote so far 
# GBNF (GGML BNF) is a format for defining formal grammars to constrain model outputs in llama.cpp. 
# Backus-Naur Form (BNF) is a notation for describing the syntax of formal languages like programming languages, file formats, and protocols. GBNF is an extension of BNF that primarily adds a few modern regex-like features.
# In GBNF, we define production rules that specify how a non-terminal (rule name) can be replaced with sequences of terminals (characters, specifically Unicode code points) and other non-terminals. The basic format of a production rule is nonterminal ::= sequence....

rhs ::= alternation
lhs ::= identifier
rule ::= lhs   S   "="   S   rhs   S    | comment
root ::= ( S   rule   S ) *

# Terminals support the full range of Unicode. Unicode characters can be specified directly in the grammar, for example hiragana ::= [ぁ-ゟ], or with escapes: 8-bit (\xXX), 16-bit (\uXXXX) or 32-bit (\UXXXXXXXX).
range ::=  "-"
factor_range ::= term   S   range   S   term

# Character ranges can be negated with ^:
negate ::=  "^"

#Sequences and Alternatives
#The order of symbols in a sequence matter. For example, in "1. " move " " move "\n", the "1. " must come before the first move, etc.
concatenation ::= ( S   factor   S   ? ) +

# Alternatives, denoted by |, give different sequences that are acceptable. 
alternation ::=  "|"
alternation ::= ( S   concatenation   S   alternation ? ) +

# Parentheses () can be used to group sequences, which allows for embedding alternatives in a larger rule or applying repetition and optional symbols (below) to a sequence.
parens_open ::= "("
parens_close ::=  ")"
parens ::= parens_open | parens_close

#Repetition and Optional Symbols
occurance ::= repetition_plus | repetition_star | repetition_optional

#* after a symbol or sequence means that it can be repeated zero or more times.
repetition_star ::=  "*" 

#+ denotes that the symbol or sequence should appear one or more times.
repetition_plus ::=  "+" 

#? makes the preceding symbol or sequence optional.
repetition_optional ::=  "?" 


#Comments and newlines
#Comments can be specified with #:
comment ::= "#" [a-zA-Z0-9 \t]*

# Newlines are allowed between rules and between symbols or sequences nested inside parentheses. Additionally, a newline after an alternate marker | will continue the current rule, even outside of parentheses.


letter ::= [a-zA-Z]
digit ::= [0-9]
S ::= ( " " | "\n" | "\t" | "\r"  )
braces_open ::= "[" 
braces_close ::= "]"
braces_symbol ::= braces_open | braces_close

quote ::=  "\""
assignment ::= "::="
 
symbol ::= braces_symbol | parens | quotes |assignment | alternation | range | occurrence  | negate
 
character ::= letter | digit | symbol | "_" | " "
identifier ::= letter ( letter | digit | "_" )*
terminal ::= quote character+  quote 
group_term ::= parens_open   S   rhs   S   parens_close
range_term ::=  braces_open   S   rhs   S   braces_close
term ::= group_term |range_term | terminal      | identifier

factor_occurence ::= term   S   occurence  
factor_negate ::= negate S factor
factor ::= factor_occurence |factor_range | term   S
 ENDSRC . Lets rewrite this  EBNF to be more expressive and explicit in its naming but keep the syntax the same for compatibility with GBNF and llama.cpp. 

#+end_src
#+begin_src output mixtral
 Result: Here is a revised version of the GBNF grammar that aims to be more self-expressive:
```css
non_terminal ::= identifier
terminal ::= "'" character+ "'"
grouped_term ::= "(" rhs ")"
range_term ::= "[" rhs "]"
factor ::= ( grouped_term | range_term | terminal ) ( occurence | negation )?
concatenation ::= factor*
alternative ::= concatenation ("|" concatenation)*
production_rule ::= non_terminal assignment concatenation ";"
grammar ::= production_rule+
```
Here is a brief explanation of each non-terminal:

* `non_terminal`: an identifier that represents a non-terminal symbol in the grammar.
* `terminal`: a sequence of one or more characters enclosed in single quotes, representing a terminal symbol in the grammar.
* `grouped_term`: a group of symbols enclosed in parentheses, used to override operator precedence or to group alternatives.
* `range_term`: a range of characters enclosed in brackets, representing a character class.
* `factor`: a single symbol that can be modified by an occurence indicator (e.g., `*`, `+`, `?`) or negation (`^`).
* `concatenation`: a sequence of one or more factors that are concatenated together.
* `alternative`: a choice between two or more concatenations, separated by the `|` symbol.
* `production_rule`: a single production rule in the grammar, consisting of a non-terminal, an assignment operator (`::=`), and a concatenation of symbols.
* `grammar`: a sequence of one or more production rules that define the grammar.

I hope this revised version is clearer and easier to understand! Let me know if you have any questions or need further clarification.
#+end_src
