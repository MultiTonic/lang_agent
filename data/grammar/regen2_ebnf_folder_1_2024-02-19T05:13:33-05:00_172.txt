
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you specified:

```
<prd_folder_rules> ::= 
  'take' <prd_input_list_tkn_inputs> ':' <prd_input_tkn_grammar> <prd_input_tkn_previousResults> ',' <prd_input_tkn_initialExample> ',' <prd_input_tkn_newExample> ';'
                       <prd_input_tkn_createdOutput> '.' <prd_input_tkn_test> '.' <prd_input_tkn_ifGood> ',' <prd_input_tkn_repeatLoop> '{' <prd_input_tkn_newD> '}'
                       <prd_input_tkn_otherwise> <prd_input_tkn_feedError> '{' <prd_input_tkn_createNewD> '}' <prd_input_tkn_upTo> <prd_input_tkn_threeTimes> ';'

<prd_input_list_tkn_inputs> ::=  <prd_input_tkn_input> ( ',' <prd_input_tkn_input> )*

<prd_input_tkn_input> ::= 'grammar' | 'previousResults' | 'newExample' | 'createdOutput' | 'test' | 'ifGood' | 'repeatLoop' | 'otherwise' | 'feedError' | 'createNewD' | 'upTo' | 'threeTimes'
```

This is a very detailed and explicit EBNF grammar for the `folder` rule, with all rules starting with `prd_` and tokens starting with `prd_<rule name>_tkn_<token name>`. It should be easy to understand and use in your system. Let me know if you have any questions or need further clarification on anything.
#+end_src
