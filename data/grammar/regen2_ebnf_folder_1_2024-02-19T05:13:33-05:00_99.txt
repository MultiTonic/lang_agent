
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

```ebnf
<folder> ::= prd_folder_tkn_start { prd_folder_tkn_entry } prd_folder_tkn_end

<prd_folder_tkn_entry> ::= <prd_folder_tkn_inputs> <prd_folder_tkn_semicolon>

<prd_folder_tkn_inputs> ::= <prd_folder_tkn_grammar> <prd_folder_tkn_previous_results> <prd_folder_tkn_new_example>

<prd_folder_tkn_grammar> ::= prd_folder_tkn_grammar_identifier

<prd_folder_tkn_previous_results> ::= prd_folder_tkn_previous_results_identifier

<prd_folder_tkn_new_example> ::= prd_folder_tkn_new_example_identifier

<prd_folder_tkn_semicolon> ::= ';'

<prd_folder_tkn_start> ::= 'start'

<prd_folder_tkn_end> ::= 'end'
```

This is a simple example, but you can extend it as needed to cover more complex cases. The key point is to use the `prd_` prefix for all production rules and the `tkn_` prefix for all tokens, as well as including the name of the rule or token in the names to make them more descriptive.

You can also add additional constraints and definitions to the grammar as needed, such as regular expressions for token values or non-terminal productions for complex structures. The specific details will depend on the requirements of your system.
#+end_src
