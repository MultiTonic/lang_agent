
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you can define your detailed EBNF grammar with the specified naming rules:
```ebnf
<prd_folder_rule> ::= 'folder' '{' <prd_take_inputs_rule> '}'

<prd_take_inputs_rule> ::= 
  'take' 'inputs' ':' <prd_grammar_token>
  <prd_previous_results_token>
  <prd_new_example_token>
  <prd_created_new_output_token>

<prd_grammar_token> ::= '<' 'grammar' ':' <tkn_identifier_token> '>'

<prd_previous_results_token> ::= '<' 'Previous' 'Results' ':' <tkn_identifier_token> '>'

<prd_new_example_token> ::= '<' 'New' 'Example' ':' <tkn_identifier_token> '>'

<prd_created_new_output_token> ::= '<' 'Created' 'new' 'output' ':' <tkn_identifier_token> '>'

<prd_test_rule> ::= 'Test' <prd_D_token> '.'

<prd_if_good_rule> ::= 'If' 'good' ',' <prd_repeat_loop_rule> '{' <prd_new_D_token> '}'

<prd_otherwise_rule> ::= 'Otherwise' 'feed' 'error' 'back' 'to' 'create' 'new' <prd_D_token> 'up' 'to' '3' 'times' '.'

<prd_start_rule> ::= 'start' 'with' <prd_this_following_code_token> 'and' 'rewrite' 'it' 'to' 'suit' 'our' 'needs' '.'

--- Tokens ---
<tkn_identifier_token> ::= [a-zA-Z_][a-zA-Z0-9_]*
```
Here, we define each rule using the `prd_` prefix and name it according to its purpose. For example, `<prd_folder_rule>` represents the folder rule, while `<prd_take_inputs_rule>` represents the take inputs rule.

Similarly, for each token used in a rule, we define them with the `prd_` or `tkn_` prefix, depending on whether it is a production name or a simple token. For instance, `<prd_grammar_token>` represents the grammar token, while `<tkn_identifier_token>` represents any valid identifier in your language.

Note that this example assumes that identifiers follow the standard naming conventions for programming languages, where an identifier starts with a letter or underscore followed by letters, digits, or underscores. If you have specific naming rules for your language, you can modify `<tkn_identifier_token>` accordingly.
#+end_src
