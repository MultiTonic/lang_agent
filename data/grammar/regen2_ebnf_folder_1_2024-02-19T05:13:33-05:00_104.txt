
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

ebnf
----

```rust
%start <start_symbol>

<start_symbol> ::= prd_folder_tkn_grammar prd_folder_tkn_previous_results prd_folder_tkn_new_example prd_folder_tkn_loop

prd_folder_tkn_grammar ::= tkn_A

prd_folder_tkn_previous_results ::= tkn_D

prd_folder_tkn_new_example ::= tkn_C

prd_folder_tkn_loop ::= '{' ( prd_folder_tkn_create_new_output prd_folder_tkn_test | prd_folder_tkn_feed_error ) '}'

prd_folder_tkn_create_new_output ::= '[' tkn_D ']' '=' ( prd_fold_left_op prd_fold_left_acc prd_fold_left_args ')'

prd_fold_left_op ::= tkn_fold_left

prd_fold_left_acc ::= tkn_acc

prd_fold_left_args ::= [ ( tkn_op prd_fold_left_arg ) ]

prd_fold_left_arg ::= tkn_h | tkn_t

prd_folder_tkn_test ::= tkn_if prd_folder_tkn_good prd_folder_tkn_repeat_loop prd_folder_tkn_otherwise_feed_error

prd_folder_tkn_good ::= tkn_true

prd_folder_tkn_repeat_loop ::= tkn_repeat

prd_folder_tkn_otherwise_feed_error ::= '{' prd_folder_tkn_create_new_output prd_folder_tkn_test '}'
```

In this example, I have defined the `<start_symbol>` of the grammar as `prd_folder_tkn_grammar prd_folder_tkn_previous_results prd_folder_tkn_new_example prd_folder_tkn_loop`, which represents the structure of the folder. The `prd_folder_tkn_loop` non-terminal represents the loop that is executed until the output is good. It contains two alternatives: `prd_create_new_output` and `prd_test`, or `prd_feed_error`.

The `prd_create_new_output` non-terminal creates a new output using the `prd_fold_left` operation, which takes an operator (`prd_fold_left_op`), an accumulator (`prd_fold_left_acc`), and a list of arguments (`prd_fold_left_args`) as input. The arguments are either `prd_fold_left_arg`, which can be either `tkn_h` or `tkn_t`.

The `prd_test` non-terminal tests the output and returns it if it is good (`prd_folder_tkn_good`), or repeats the loop otherwise (`prd_folder_tkn_repeat_loop`). If the output is not good, an error is fed back into the `prd_create_new_output` non-terminal.

I hope this helps! Let me know if you have any questions.
#+end_src
