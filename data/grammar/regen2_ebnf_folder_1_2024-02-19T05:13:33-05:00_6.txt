
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your detailed EBNF grammar with the specified naming conventions:

EBNF Grammar:

<folder> ::= prd\_folder\_tkn\_name ':' prd\_folder\_tkn\_leftBrace <file>* prd\_folder\_tkn\_rightBrace

<file> ::= prd\_file\_tkn\_name ':' prd\_file\_tkn\_leftBrace <rule>* prd\_file\_tkn\_rightBrace

<rule> ::= prd\_rule\_tkn\_name ':' prd\_rule\_tkn\_leftBrace <element> (prd\_rule\_tkn\_bar <element>)^* prd\_rule\_tkn\_rightBrace

<element> ::= prd\_element\_tkn\_symbol ':' [prd\_element\_tkn\_terminal] | prd\_element\_tkn\_nonTerminal ':' <identifier>

<identifier> ::= [a-zA-Z]+

In this EBNF grammar, each non-terminal starts with "prd" followed by the name of the production, and each terminal is prefixed with "prd" followed by the name of the production, an underscore, and the name of the token. The left brace and right brace tokens are also given explicit names to make the grammar more readable.

This EBNF grammar should be able to represent a hierarchy of folders, files, and rules, where each rule can have multiple elements separated by bars. Each element can either be a terminal symbol or a non-terminal symbol that refers to an identifier. The identifiers are restricted to only contain alphabetic characters.
#+end_src
