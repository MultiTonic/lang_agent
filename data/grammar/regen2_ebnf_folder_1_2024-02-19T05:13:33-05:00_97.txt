
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you specified:
```rust
<prd_folder_rules> ::= <prd_take_inputs_tkn_grammar> ':' <prd_take_inputs_tkn_inputA> <prd_take_inputs_tkn_previous_results> ':' <prd_take_inputs_tkn_initial_example> <prd_take_inputs_tkn_new_example> <prd_take_inputs_tkn_created_new_output> <prd_take_inputs_tkn_test> '.' <prd_take_inputs_tkn_if_good> <prd_take_inputs_tkn_repeat_loop> <prd_take_inputs_tkn_with_new> <prd_take_inputs_tkn_otherwise> <prd_take_inputs_tkn_create_new_D> '.' <prd_take_inputs_tkn_start> '{' <prd_fold_left_rules> '}'

<prd_fold_left_rules> ::= <prd_fold_left_rule> | <prd_fold_left_rules> <prd_fold_left_rule>

<prd_fold_left_rule> ::= <prd_fold_left_tkn_op> <prd_fold_left_tkn_acc> '=' <prd_fold_left_tkn_function> '(' <prd_fold_left_tkn_arguments> ')'

<prd_fold_left_arguments> ::= <prd_fold_left_argument> | <prd_fold_left_arguments> ',' <prd_fold_left_argument>

<prd_fold_left_argument> ::= <prd_take_inputs_tkn_inputA> | <prd_take_inputs_tkn_previous_results> | <prd_take_inputs_tkn_initial_example> | <prd_take_inputs_tkn_new_example> | <prd_take_inputs_tkn_created_new_output>
```
You can continue defining the rest of the rules in your grammar using this naming convention. This should make your EBNF grammar more expressive and explicit, as you requested.
#+end_src
