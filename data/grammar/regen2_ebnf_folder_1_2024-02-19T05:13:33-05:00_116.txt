
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you could define your EBNF grammar with the naming conventions you described:
```
<prd_folder_rules> ::= <prd_take_inputs_rule> | <prd_create_new_output_rule> | <prd_test_rule> | <prd_loop_rule> | <prd_start_rule>

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' <prd_grammar_tkn_A> ';' <prd_previous_results_tkn_D> ';' <prd_new_example_tkn_C> ';'

<prd_create_new_output_rule> ::= 'Created' 'new' 'output' <prd_previous_results_tkn_D broadarrow> '.'

<prd_test_rule> ::= 'Test' <prd_new_output_tkn_D> '.' <prd_if_good_tkn_ifgood> 'repeat' 'loop' <prd_otherwise_tkn_otherwise> 'feed' <prd_error_tkn_error> 'back' 'to' 'create' 'new' <prd_output_tkn_D> 'up' 'to' '3' 'times' '.'

<prd_loop_rule> ::= 'start' 'with' <prd_this_following_code_tkn_this_following_code> 'and' <prd_rewrite_it_tkn_rewrite_it> 'to' 'suit' 'our' 'needs' '.'

<prd_start_rule> ::= 'let' 'rec' <prd_fold_left_tkn_fold_left> 'op' <prd_acc_tkn_acc> '=' <prd_function_tkn_function> '<prd_parameters_tkn_parameters>'

<prd_parameters_tkn_parameters> ::= '(' <prd_acc_tkn_acc> ':' 'a' '.' 'list' ')' 'func' '(' <prd_h_tkn_h> ':' 'a' '.' 'list' ')'

<prd_op_tkn_op> ::= '<=' | '>=' | '=' | '!=' | '<' | '>'

<prd_if_good_tkn_ifgood> ::= 'if' <prd_good_tkn_good>

<prd_otherwise_tkn_otherwise> ::= 'otherwise'

<prd_error_tkn_error> ::= 'error'

<prd_grammar_tkn_A> ::= 'A'

<prd_previous_results_tkn_D> ::= 'D'

<prd_new_example_tkn_C> ::= 'C'

<prd_this_following_code_tkn_this_following_code> ::= '<prd_this_following_code_rules>'

<prd_rewrite_it_tkn_rewrite_it> ::= 'rewrite' 'it'

<prd_h_tkn_h> ::= 'h'

<prd_fold_left_tkn_fold_left> ::= 'fold_left'

<prd_acc_tkn_acc> ::= 'acc'

<prd_function_tkn_function> ::= 'function'
```
This is just an example, you can add or remove rules and tokens as needed. The main idea is to have a consistent naming convention for all the rules and tokens in your EBNF grammar.
#+end_src
