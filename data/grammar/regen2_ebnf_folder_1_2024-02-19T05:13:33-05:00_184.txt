
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar that follows your naming conventions:

<grammar> ::= prd\_grammar\_tkn_Grammar

prd\_grammar\_tkn\_Grammar = '(' prd\_previous\_results\_tkn\_PreviousResults, prd\_initial\_example\_tkn\_InitialExample, prd\_new\_example\_tkn\_NewExample ')'

prd\_previous\_results\_tkn\_PreviousResults ::= prd\_folder\_tkn\_Folder

prd\_folder\_tkn\_Folder = '{' (prd\_take\_inputs\_tkn\_TakeInputs ";")* '}'

prd\_take\_inputs\_tkn\_TakeInputs = prd\_grammar\_tkn\_Grammar, prd\_previous\_results\_tkn\_PreviousResults, prd\_new\_example\_tkn\_NewExample

prd\_initial\_example\_tkn\_InitialExample ::= prd\_expression\_tkn\_Expression

prd\_new\_example\_tkn\_NewExample ::= prd\_expression\_tkn\_Expression

prd\_expression\_tkn\_Expression = (prd\_sequence\_tkn\_Sequence | prd\_alternative\_tkn\_Alternative | prd\_option\_tkn\_Option | prd\_repeat\_tkn\_Repeat | prd\_group\_tkn\_Group | prd\_terminal\_tkn\_Terminal | prd\_nonterminal\_tkn\_Nonterminal)

prd\_sequence\_tkn\_Sequence = "(" prd\_expression\_tkn\_Expression* ")"

prd\_alternative\_tkn\_Alternative = "[" prd\_expression\_tkn\_Expression+ "]"

prd\_option\_tkn\_Option = "{" prd\_expression\_tkn\_Expression "}"

prd\_repeat\_tkn\_Repeat = prd\_expression\_tkn\_Expression "*"

prd\_group\_tkn\_Group = "'" prd\_expression\_tkn\_Expression "'"

prd\_terminal\_tkn\_Terminal = "\"" Text "\\\""

prd\_nonterminal\_tkn\_Nonterminal = "<" Name ">"

Text ::= any sequence of characters except newline or double quote
Name ::= any sequence of characters that does not contain a space or '>'
#+end_src
