
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

EBNF Grammar:

prod\_folder  ::= "folder" tkn\_name_A tkn\_open prod\_contents tkn\_close .

prod\_contents ::= (prod\_file | prod\_folder)* .

prod\_file  ::= "file" tkn\_name_B .

tkn\_name\_A ::= [a-zA-Z]+ .

tkn\_name\_B ::= [a-zA-Z]+ .

tkn\_open ::= "{" .

tkn\_close ::= "}" .

This EBNF grammar defines a folder which can contain multiple files or other folders. Each file or folder is named using a name token (tkn\_name\_A or tkn\_name\_B) and enclosed by open/close brackets (tkn\_open, tkn\_close). The contents of the folder are defined as zero or more instances of either prod\_file or prod\_folder.

You can use this EBNF grammar to parse and generate text that conforms to this structure. The naming conventions you described have been applied, with all rule names starting with "prod" and token names starting with "tkn".
#+end_src
