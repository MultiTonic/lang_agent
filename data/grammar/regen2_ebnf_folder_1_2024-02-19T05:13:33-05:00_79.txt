
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your detailed EBNF grammar with the naming conventions you specified:

```
(* EBNF grammar for a folder structure *)

%start <prd_folder_start_tkn_START> start

<prd_folder_start_tkn_START> ::= 'folder' <prd_identifier_tkn_IDENTIFIER> '{' <prd_content_tkn_CONTENT> '}'

<prd_content_tkn_CONTENT> ::= <prd_content_tkn_CONTENT_ITEM_LIST> | <prd_content_tkn_EMPTY>

<prd_content_tkn_CONTENT_ITEM_LIST> ::= <prd_content_item_tkn_CONTENT_ITEM> { ',' <prd_content_item_tkn_CONTENT_ITEM> }

<prd_content_item_tkn_CONTENT_ITEM> ::= <prd_grammar_tkn_GRAMMAR> | <prd_results_tkn_RESULTS>

<prd_grammar_tkn_GRAMMAR> ::= 'grammar' <prd_identifier_tkn_IDENTIFIER>

<prd_results_tkn_RESULTS> ::= 'previous_results' <prd_identifier_tkn_IDENTIFIER>
                     | 'new_example' <prd_identifier_tkn_IDENTIFIER>
                     | 'created_new_output' <prd_identifier_tkn_IDENTIFIER>

<prd_identifier_tkn_IDENTIFIER> ::= [a-zA-Z_] [a-zA-Z0-9_]*

<prd_empty_tkn_EMPTY> ::= '}'
```

This EBNF grammar defines a folder structure, where each folder can contain a list of grammars and results. The `start` symbol is used to indicate the starting point of the grammar. Each rule has a name that starts with `prd_`, followed by the name of the rule. Tokens are named using the `prd_<rule_name>_tkn_<token_name>` convention.

The `<prd_content_tkn_CONTENT>` rule can either represent a list of content items (i.e., grammars or results) or be empty. The `<prd_content_item_tkn_CONTENT_ITEM>` rule can be either a grammar or a result.

The `<prd_grammar_tkn_GRAMMAR>` and `<prd_results_tkn_RESULTS>` rules define the different types of content items that can be included in the folder structure. The `<prd_identifier_tkn_IDENTIFIER>` rule is used to match identifiers, which consist of a letter or underscore followed by any number of letters, digits, or underscores.

Finally, the `<prd_empty_tkn_EMPTY>` rule matches the empty string, which is used to represent an empty folder.
#+end_src
