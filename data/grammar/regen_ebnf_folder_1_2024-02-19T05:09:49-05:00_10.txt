
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of how you could define an EBNF grammar with the naming conventions you described:
```
<prd_folder_rules> ::= 
 '(' <prd_take_inputs_rule> ')'

<prd_take_inputs_rule> ::= 
 <tkn_grammar> ':' <tkn_A>
 ' ' <tkn_previous_results> ':' <tkn_D>
 ' ' <tkn_initial_example> ':' <tkn_B>
 ' ' <tkn_new_example> ':' <tkn_C>
 ' ' <tkn_created_new_output> ':' <tkn_D>
 ' ' <tkn_test_output> '.'
 (' ' <tkn_if_good> ',' <tkn_repeat_loop> ' ' <tkn_with_new_D>)
 (' ' <tkn_otherwise> ' ' <tkn_feed_error> ' ' <tkn_back_to_create_new_D> ' ' <tkn_up_to> ' ' <tkn_three_times>)

<prd_test_output_rule> ::= 
 <tkn_start> ' ' <tkn_with_this_following_code> ' ' <tkn_and_rewrite_it> ' ' <tkn_to_suit_needs> '.'
```
You can continue defining the rest of the rules in the same way, using the `<prd_*_rule>` and `<tkn_*>` naming conventions. This makes it clear which tokens and productions are being referred to in each rule, and allows for easy identification and modification of specific elements in the grammar.
#+end_src
