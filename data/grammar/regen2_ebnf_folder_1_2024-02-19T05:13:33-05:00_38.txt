
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar with the requested naming conventions:
```sql
<prd_folder_rules> ::= 
  'take' 'inputs' ':' <prd_input_specification_tkn_grammar> ';'
                     <prd_input_specification_tkn_previous_results> ':' <prd_input_specification_tkn_D> ';'
                     <prd_input_specification_tkn_new_example> ':' <prd_input_specification_tkn_C> ';'
                     <prd_input_specification_tkn_output> ':' <prd_input_specification_tkn_D broadarrow'>'
                     <prd_loop_condition_tkn_if> '(' <prd_condition_tkn_good> ',' <prd_action_tkn_repeat_loop> ')' ';'
                     <prd_action_tkn_start_with> <prd_input_specification_tkn_this_following_code> <prd_symbol_tkn_::> <prd_input_specification_tkn_rewrite> ';'
                     <prd_end_of_statement_tkn_ENDSRC> '.' '<' <prd_symbol_tkn_left_square_bracket>
                     <prd_symbol_tkn_newline>
                     <prd_symbol_tkn_indent>
                     <prd_input_specification_tkn_rules> ':' <prd_rules_definition_tkn_EBNF> ';' '<' <prd_symbol_tkn_right_square_bracket> '.'

<prd_input_specification_tkn_grammar> ::= <prd_symbol_tkn_A>
<prd_input_specification_tkn_previous_results> ::= <prd_symbol_tkn_D>
<prd_input_specification_tkn_new_example> ::= <prd_symbol_tkn_C>
<prd_input_specification_tkn_output> ::= <prd_symbol_tkn_D> 'broadarrow'
<prd_condition_tkn_good> ::= <prd_symbol_tkn_if> 'good' ','
<prd_action_tkn_repeat_loop> ::= <prd_symbol_tkn_repeat_loop>
<prd_action_tkn_start_with> ::= <prd_symbol_tkn_start_with>
<prd_input_specification_tkn_this_following_code> ::= <prd_symbol_tkn_this_following_code>
<prd_rules_definition_tkn_EBNF> ::= 'EBNF'
```
This EBNF defines a `folder` rule, which is the starting point of the grammar. This rule takes in several inputs and performs certain actions based on those inputs. The input specifications are defined by the rules `prd_input_specification_tkn_grammar`, `prd_input_specification_tkn_previous_results`, `prd_input_specification_tkn_new_example`, and `prd_input_specification_tkn_output`. The actions are defined by the rules `prd_condition_tkn_good`, `prd_action_tkn_repeat_loop`, and `prd_action_tkn_start_with`.

The naming conventions requested have been followed, with each rule starting with "prd" and each token starting with "tkn". The names of the rules and tokens are descriptive and explicit. For example, the rule for defining EBNF grammars is called `prd_rules_definition_tkn_EBNF`.

This EBNF grammar can be used as a starting point for building a more complex and detailed system using EBNF grammars. By following consistent naming conventions and making the rules and tokens explicit, it will be easier to understand and maintain the grammar over time.
#+end_src
