
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure, I can help you create an EBNF grammar that meets your requirements. Here's an example based on the `fold_left` function you provided:
```lua
<fold-left> ::= 'let rec' <identifier> '='
                  'fun' '(' <identifier> ':' <list-type>'.'
                  '->' <expression>
              'in' <expression>

<identifier> ::= <letter> {<letter> | <digit>}

<list-type> ::= '(' <type> 'list' ')'

<expression> ::=
    <simple-expression>
  | <if-expression>
  | <let-expression>
  | <function-application>

<simple-expression> ::=
    <comparison-expression>
  | '<' <expression> '>' <expression>
  | '-' <expression>
  | '(' <expression> ')'

<comparison-expression> ::=
    <expression> '=' <expression>
  | <expression> '<>' <expression>
  | <expression> '<' <expression>
  | <expression> '>' <expression>
  | <expression> '<=' <expression>
  | <expression> '>=' <expression>

<if-expression> ::=
    'if' <expression> 'then' <expression> 'else' <expression>

<let-expression> ::=
    'let' '(' {<binding>} ')' 'in' <expression>

<binding> ::=
    <identifier> '=' <expression>

<function-application> ::=
    <expression> '(' {<expression>} ')'

<type> ::=
    'int'
  | 'bool'
  | 'string'
  | 'unit'
  | '(' <type> '->' <type> ')'
  | <list-type>

<letter> ::= 'a' .. 'z' | 'A' .. 'Z'
#+end_src
