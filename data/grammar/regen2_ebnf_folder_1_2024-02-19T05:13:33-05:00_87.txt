
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you described:

<bnf>
 : /\* non-terminals start with "prd" \*/
 prd\_ruleName ::= <production>

 <production> ::= <symbols> ';'

 <symbols> ::= <sequence> | <choice> | <opt> | <rep> | <token>

 <sequence> ::= <symbol> ',' <symbols>

 <choice> ::= '{' <sequence> '|' <sequence> '}'

 <opt> ::= '[' <symbols> ']'

 <rep> ::= '(' <symbols> ')'

 <token> ::= /\* tokens start with "prd\_<ruleName>\_tkn" \*/
 prd\_ruleName\_tkn\_tokenName
/

With this grammar, you can define specific rules by expanding the production for each non-terminal (prd\_ruleName). For example, here's how you could define a simple rule that matches a string of lowercase letters:

prd\_lowercase ::= prd\_lowercase\_tkn\_a | prd\_lowercase\_tkn\_b | ... | prd\_lowercase\_tkn\_z ;

And here's how you could use this rule in a sequence with other symbols:

prd\_sequence ::= prd\_number , prd\_lowercase , prd\_symbol ;

Where prd\_number and prd\_symbol are defined using their own production rules.

By following these naming conventions, you can create a more expressive and explicit EBNF grammar that is easier to understand and maintain.
#+end_src
