
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you might define your detailed EBNF grammar with the naming conventions you described:

```
<prd_folder_tkn_grammar> ::= <prd_take_inputs_tkn_inputs> <prd_opt_tkn_options> '.' .

<prd_take_inputs_tkn_inputs> ::= 'take' <prd_input_tkn_input> ( ',' <prd_input_tkn_input> )* .

<prd_input_tkn_input> ::= <prd_grammar_tkn_grammar_name>
                         | <prd_previous_results_tkn_previous_results_name>
                         | <prd_new_example_tkn_new_example_name> .

<prd_opt_tkn_options> ::= 'opt' ':' [ <prd_max_errors_tkn_max_errors_num> ] [ ',' <prd_initial_example_tkn_initial_example_name> ] .

<prd_max_errors_tkn_max_errors_num> ::= <DIGIT>+ .

<prd_initial_example_tkn_initial_example_name> ::= <QUOTED_TEXT> .

<prd_new_example_tkn_new_example_name> ::= <QUOTED_TEXT> .

<prd_created_output_tkn_created_output_name> ::= <QUOTED_TEXT> .

<prd_test_tkn_test> ::= 'test' <prd_created_output_tkn_created_output_name> '.' .

<prd_if_good_tkn_if_good> ::= 'if' 'good' ':' <prd_loop_tkn_loop> .

<prd_otherwise_tkn_otherwise> ::= 'otherwise' ':' <prd_create_new_D_tkn_create_new_D> .

<prd_repeat_loop_tkn_repeat_loop> ::= 'repeat' 'loop' ':' <prd_test_tkn_test> <prd_if_good_tkn_if_good> <prd_otherwise_tkn_otherwise> '.' .

<prd_create_new_D_tkn_create_new_D> ::= 'create' 'new' 'D' ':' <prd_fold_left_tkn_fold_left> .

<prd_fold_left_tkn_fold_left> ::= 'fold_left' '(' <prd_op_tkn_op> ',' <prd_acc_tkn_acc> ')' <prd_function_tkn_function> .

<prd_op_tkn_op> ::= <prd_operation_tkn_operation_name> .

<prd_acc_tkn_acc> ::= <prd_accumulator_tkn_accumulator_name> .

<prd_function_tkn_function> ::= <prd_function_args_tkn_function_args> '.' .

<prd_function_args_tkn_function_args> ::= 'function' '(' <prd_arg1_tkn_arg1> ',' <prd_arg2_tkn_arg2> ')' .

<prd_arg1_tkn_arg1> ::= <prd_input_tkn_input> .

<prd_arg2_tkn_arg2> ::= <prd_function_body_tkn_function_body> .

<prd_function_body_tkn_function_body> ::= 'function' 'body' .
```

This EBNF grammar defines the structure of your `folder` program using the naming conventions you specified. Each non-terminal symbol starts with `prd_`, and each token is named according to the convention `prd_<prod name>_tkn_<token name>`. This should make it easy to understand the structure of the grammar and how the different parts fit together.

Note that this is just one possible way to define your EBNF grammar, and you may need to modify it to suit the specific requirements of your system. For example, you might want to add additional non-terminal symbols or tokens to represent new concepts or data types, or you might need to adjust the production rules to reflect the allowed combinations of these elements.
#+end_src
