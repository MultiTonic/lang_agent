
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure, here's an example of how you could define your EBNF grammar with the naming conventions you described:
```ebnf
<prd_folder_rule> ::= 'folder' <prd_take_inputs_rule>

<prd_take_inputs_rule> ::= 'take' 'inputs' ':' <prd_grammar_rule> <prd_previous_results_rule> <prd_new_example_rule> <prd_created_new_output_rule>

<prd_grammar_rule> ::= 'grammar' ':' <tkn_identifier_rule>

<prd_previous_results_rule> ::= 'Previous' 'Results' ':' <tkn_identifier_rule> 'initially,' <prd_initial_example_rule>

<prd_initial_example_rule> ::= 'Initial' 'example' ':' <tkn_identifier_rule>

<prd_new_example_rule> ::= 'New' 'Example' ':' <tkn_identifier_rule>

<prd_created_new_output_rule> ::= 'Created' 'new' 'output' <tkn_identifier_rule> '.'

<prd_test_d_rule> ::= 'Test' <tkn_identifier_rule> '.'

<prd_if_good_rule> ::= 'If' 'good,' 'repeat' 'loop' 'with' 'new' <tkn_identifier_rule> '.' 'Otherwise' 'feed' 'error' 'back' 'to' 'create' 'new' <tkn_identifier_rule> 'up' 'to' '3' 'times' '.'

<prd_start_rule> ::= 'start' 'with' <prd_folder_rule> 'and' <prd_take_inputs_rule> 'and' <prd_test_d_rule> 'and' <prd_if_good_rule>

<tkn_identifier_rule> ::= [a-zA-Z][a-zA-Z0-9]*
```
In this example, each rule and token is named according to your specifications. For example, the `folder` keyword is defined as `<prd_folder_rule>`, and the `grammar` token is defined as `<tkn_identifier_rule>`. This makes it easy to understand the purpose of each element in the grammar.

Note that I've also included some additional rules (such as `<prd_test_d_rule>` and `<prd_if_good_rule>`) that weren't present in your original code, but which seem necessary to fully specify the behavior of your system. You can modify or remove these rules as needed to suit your specific use case.
#+end_src
