
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here's an example of how you could define your EBNF grammar with the naming conventions you specified:

```ebnf
<folder> ::= prd_folder_tkn_inputs ':' prd_folder_tkn_grammar ',' prd_folder_tkn_previous_results ',' prd_folder_tkn_new_example ',' prd_folder_tkn_created_new_output ';' prd_folder_tkn_test ',' prd_folder_tkn_if_good ',' prd_folder_tkn_repeat_loop '{' prd_folder_tkn_up_to '}' ';'

<prd_folder_tkn_grammar> ::= prd_grammar_tkn_A
<prd_folder_tkn_previous_results> ::= prd_previous_results_tkn_D
<prd_folder_tkn_new_example> ::= prd_new_example_tkn_C
<prd_folder_tkn_created_new_output> ::= prd_created_new_output_tkn_D

<prd_folder_tkn_test> ::= prd_test_tkn_test D ';'
<prd_folder_tkn_if_good> ::= prd_if_good_tkn_if B ',' prd_if_good_tkn_repeat_loop '{' prd_if_good_tkn_up_to '}' ';'

<prd_folder_tkn_inputs> ::= prd_inputs_tkn_take ':' prd_inputs_tkn_grammar ',' prd_inputs_tkn_previous_results ',' prd_inputs_tkn_new_example

<prd_if_good_tkn_repeat_loop> ::= prd_repeat_loop_tkn_fold_left '(' prd_repeat_loop_tkn_op ',' prd_repeat_loop_tkn_acc ',' prd_repeat_loop_tkn_function ')'

<prd_repeat_loop_tkn_op> ::= prd_op_tkn_op
<prd_repeat_loop_tkn_acc> ::= prd_acc_tkn_acc
<prd_repeat_loop_tkn_function> ::= prd_function_tkn_function
```

This is a very detailed and explicit version of the original code, with all rules and tokens named according to your specifications. It uses the `fold_left` function from the original code, but breaks it down into its own rule with the name `prd_repeat_loop_tkn_fold_left`.

Please note that this is just an example, you might need to adjust the grammar based on your specific use case and requirements.
#+end_src
