
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Sure, here's an example of how you could define your EBNF grammar with the naming conventions you described:
```ebnf
<prd_folder_tkn_grammar> = A ;
<prd_folder_tkn_previous_results> = D ;
<prd_folder_tkn_initial_example> = B ;
<prd_folder_tkn_new_example> = C ;
<prd_folder_tkn_output> = D ;

<prd_fold_left_tkn_function> = 'let' 'rec' <prd_fold_left_tkn_identifier> '=' <prd_function_tkn_parameter_1> 'op' <prd_fold_left_tkn_parameter_2> 'acc' '=' <prd_fold_left_tkn_parameter_3> 'do' <prd_fold_left_tkn_body> 'done' ;

<prd_function_tkn_parameter_1> = <prd_identifier> | <prd_literal> ;
<prd_function_tkn_parameter_2> = <prd_identifier> | <prd_literal> ;
<prd_function_tkn_parameter_3> = <prd_expression> ;

<prd_fold_left_tkn_body> = <prd_expression_list> ;

<prd_expression_list> = <prd_expression> { ';' <prd_expression> } ;

<prd_expression> = <prd_identifier> | <prd_literal> | <prd_if_expression> | <prd_function_application> | <prd_sequence_expression> | <prd_let_expression> | <prd_match_expression> ;

<prd_if_expression> = 'if' <prd_expression> 'then' <prd_expression> 'else' <prd_expression> ;

<prd_function_application> = <prd_identifier> '<' [ <prd_expression> { ',' <prd_expression> } ] '>' ;

<prd_sequence_expression> = '(' <prd_expression_list> ')' ;

<prd_let_expression> = 'let' <prd_let_binding>+ 'in' <prd_expression> ;

<prd_let_binding> = <prd_identifier> '=' <prd_expression> ;

<prd_match_expression> = 'match' <prd_expression> 'with' <prd_match_case>+ 'end' ;

<prd_match_case> = <prd_pattern> '->' <prd_expression> | '|' <prd_match_case> ;

<prd_pattern> = <prd_literal> | <prd_variable> | <prd_constructor_application> ;

<prd_constructor_application> = <prd_identifier> '<' [ <prd_pattern> { ',' <prd_pattern> } ] '>' ;

<prd_identifier> = '[a-zA-Z][a-zA-Z0-9]*' ;
<prd_literal> = <prd_string_literal> | <prd_integer_literal> | <prd_char_literal> | <prd_boolean_literal> | <prd_unit_literal> ;

<prd_string_literal> = '"' [^"\n]* '"' ;
<prd_integer_literal> = ['-'] '0' .. '9'+ ;
<prd_char_literal> = '\'' [^'\n] '\'' ;
<prd_boolean_literal> = 'true' | 'false' ;
<prd_unit_literal> = '()' ;
```
This EBNF grammar defines the `fold_left` function using your naming conventions. Each rule starts with `prd_`, and each token is named using the format `prd_<prod name>_tkn_<token name>`. The `fold_left` function is defined in terms of its parameters, body, and possible expressions, which include literals, identifiers, function applications, sequences, let bindings, and match expressions. Each of these elements is also named using the same naming convention.

Note that this is just an example, and you may need to modify it to suit your specific needs. Additionally, this EBNF grammar assumes that certain language constructs (such as `let`, `in`, `if`, `then`, `else`, `match`, and `end`) are already defined in the underlying language or parser generator.
#+end_src
