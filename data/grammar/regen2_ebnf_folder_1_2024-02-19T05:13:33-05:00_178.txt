
#+begin_src input
We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed.
for each rule we want to create a nameing rule for the rules that have them all start with prd. each token should be called tkn.
if a token is used in a rule lets make it prd_<prod name>_tkn_<token name>
Here is the code we wrote so far 
(*
folder

   take inputs :
   grammar : A
   Previous Results : D initially, Initial example : B
   New Example : C
   Created new output D.
   Test D. If good, repeat loop with new D. Othewise feed error back to create new D up to 3 times.
   start with this following code and rewrite it to suit our needs.
*)

let rec fold_left op acc = function
  | []   -> acc
  | h :: t -> fold_left op (op acc h) t
                
 ENDSRC . Lets create a new EBNF that is more expressive and explicit.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar with the requested naming conventions:

<PRODUCTIONS> ::= prd\_folder\_tkn_START
prd\_folder\_tkn\_START = 'folder' <FS> <GRAMMAR> <FS> <PREV\_RESULTS> <FS> <NEW\_EXAMPLE> <FS> prd\_process\_tkn
prd\_process\_tkn = prd\_takeinputs\_tkn / prd\_testandrepeat\_tkn
prd\_takeinputs\_tkn = 'take' <FS> <GRAMMAR> <FS> <PREV\_RESULTS> <FS> <NEW\_EXAMPLE> <FS> prd\_creatednewoutput\_tkn
prd\_creatednewoutput\_tkn = 'created' <FS> 'new' <FS> 'output' <FS> <PREV\_RESULTS> <FS> prd\_test\_tkn
prd\_test\_tkn = 'test' <FS> <OUTPUT> <FS> prd\_testresult\_tkn
prd\_testresult\_tkn = 'if' <FS> 'good' <FS> 'repeat' <FS> 'loop' <FS> 'with' <FS> <OUTPUT> / 'otherwise' <FS> 'feed' <FS> 'error' <FS> prd\_creatednewoutput\_tkn
prd\_testandrepeat\_tkn = 'start' <FS> 'with' <FS> prd\_takeinputs\_tkn <FS> 'repeat' <FS> prd\_test\_tkn
<GRAMMAR> ::= tkn\_A
<PREV\_RESULTS> ::= tkn\_D / prd\_previousresults\_tkn
prd\_previousresults\_tkn = tkn\_B
<NEW\_EXAMPLE> ::= tkn\_C
<OUTPUT> ::= tkn\_D
<FS> ::= ',' / ';' / '\n'

This EBNF defines a set of productions, where each production has a name starting with "prd" and a token name. The tokens are named using the convention "tkn", followed by an underscore, then the name of the production it belongs to, another underscore, and then the actual token name.

The top-level production is prd\_folder\_tkn\_START which is defined as the string 'folder' followed by a file separator (FS), <GRAMMAR>, FS, <PREV\_RESULTS>, FS, <NEW\_EXAMPLE> and then another production.

The next level of productions are prd\_process\_tkn, prd\_takeinputs\_tkn, and prd\_test\_tkn. Prd\_process\_tkn can be either prd\_takeinputs\_tkn or prd\_testandrepeat\_tkn. The rest of the production are self-explanatory.

Please note that this is an example of how you could implement the naming convention, and there might be some modifications needed depending on your specific use case.
#+end_src
