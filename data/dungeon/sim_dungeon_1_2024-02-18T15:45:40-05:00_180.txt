
#+begin_src input
The goal is to create a flexible and customizable system for generating prompts for a language model that can be used to generate creative and imaginative descriptions of a dungeon in a fantasy role-playing game.
the game would involve exploring a dungeon generated using a large language model and a proof engine. The player would navigate through the dungeon, encountering various objects and NPCs along the way, each with their own set of properties and behaviors defined by the terms used in the script.

the game would involve exploring a dungeon and encountering various types of monsters, treasures, and challenges. The player would use weapons, spells, and artifacts to defeat the monsters and complete quests, all while navigating a labyrinthine cave or other underground environment. The game might also include elements of drama, music, and art, as well as secrets and occult themes.

Overall, it seems that the code is designed to generate a richly detailed and immersive fantasy RPG experience using a combination of natural language processing and formal methods. By using a large language model and a proof engine, the game could potentially offer a high degree of realism and interactivity, allowing players to explore and interact with the dungeon in flexible and unpredictable ways.
The script is being used to generate and test various combinations of terms to create content for a fantasy role-playing game. The generated content include descriptions of weapons, spells, artifacts, monsters, quests, and other elements of a typical RPG setting. 
Here is the code we wrote so far 
let type_terms = [
  "weapon";
  "spell";
  "artifacts";
  "magic items";
  "treasure";
  "monster";
  "quest";
  "challege";
  "theme";
  "drama";
  "music";
  "art";
  "secrets";
  "occult";
  "reveal";
  "hero journey"
] 
let model_name = "mixtral" 
let url= "https://dev-hub.agentartificial.com"
let verbs = [
  "role-play";
  "specify";"encode";"code";  "program";"prove";
  "create";  "design";
  "create descriptions for an artist";
  "create descriptions for an artist to design a comic book panel";
  "analyse";"lift";"shift";"splice";"quote";
  "quasi-quote";
  "quasi-quine-quote";
  "quasi-quine-quote-in-ocaml";
  "quasi-quine-quote-in-ocaml-coq-metacoq";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-observe";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-orient";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-decide";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-act";
  "meta-quote"
]
let top_terms =  ["Imagine";
                  "Consider";
                  "Draw";
                  "Paint";
                  "Compose";
                  "Balance"]

let places = [
  "the country";
  "the region";
  "the city";
  "the street";
  "the house";
  "the building";
  "the dungeon";
  "the labyrinth";
  "the cave";
  "the swamp";
  "the room";
  "the hallway";
  "the chest";
  "the bag";
  "the wallet";
  "the vault";
  "the keep";
  "the hideout";
  "platos cave";
  "garden of eden";
  "the river styx";
  "the restaurant at the end of the universe";
]
                       
let count= 3 
let simple = "dune exec ./bin/simple.exe --" 
let binding = "--openai" 
let test_name = "dungeon2"

let prompt type_name try_n verb place=
  "\"" ^
  "We are building a dungeon generator for a fantasy role-playing game with a large language model and a proof engine combined via adaptive language agent architecture. In that context we ask you to forgivingly and creatively use the following context: Verb : " ^ verb ^ "; Type Name: " ^ type_name ^ "; Place: " ^  place ^   " What is your response?" ^  " Please generate variant array of size " ^ ( string_of_int try_n) ^    "\"" 

let make_args type_name i verb place= [
  simple;
  binding;
  "-m";    model_name;
  "-s";    test_name ^ type_name ^ verb;
  "-x";    ".new_" ^ (string_of_int i) ^ verb ^  type_name ^ place ^  ".txt";
  "-p";    prompt    type_name           i verb place;
  "-u";    url;
]

                 
let do_apply_list    run_cmd make_args type_terms =
  for i = 1 to count do
    List.iter (fun top ->
        List.iter (fun term ->
            List.iter (fun term2 ->
                List.iter (fun verb ->
                    List.iter (fun place ->
                        List.iter (fun place2 ->
                            let term3 = term ^ " with a " ^ term2 in
                            let verb2 = top ^ " doing " ^ verb in
                            let place3 = place ^ " connected with " ^ place2 in
                            let args = make_args
                                term3 i verb2
                                place3 in
                            run_cmd args
                          ) places
                      ) places
                  ) verbs
              ) type_terms
          ) type_terms
      ) top_terms
  done
    
let run_cmd args =
  let cmd =  String.concat " " args in
  Printf.printf "Cmd: %s\n" cmd;
  let inp = Unix.open_process_in cmd in
  let r = In_channel.input_line inp in
  In_channel.close inp;
  match r with
  |Some out ->
    Printf.printf "Output: %s\n" out
  |None ->
    Printf.printf "Output: None\n"
    
let () =do_apply_list run_cmd make_args type_terms 
    
 ENDSRC . Please imagine the simulation its execution. Imagine running the code and all the output it would generate. Generate a grammar that we can use to generate prompts for create the dungeon using your knowledge. Write the grammar in EBNF notation. We will start with path through the dungeon starting at the entrance and going all the way to the ends.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar that could be used to generate prompts for creating a dungeon:
```scss
dungeon-path ::= [entrance-description path* treasure-room-description]

entrance-description ::= "Imagine the entrance to the dungeon, with its ominous" type-description "guarding the way in."

path ::= "Consider a path leading from one room to another, passing through" place-description.
         "Maybe there's a fork in the road, or a hidden door that only appears"
         "when certain conditions are met."

treasure-room-description ::= "Draw a room filled with treasure, guarded by a fearsome" monster-description ". The walls are adorned with" art-description ", and there's a" music-description "playing softly in the background. Perhaps there's a secret passage leading out of the room, or a clue to some greater mystery."

type-description ::= (type-name | type-name "with a special enchantment")

type-name ::= "weapon" | "spell" | "artifact" | "magic item" | "treasure"
            | "monster" | "quest" | "challenge" | "theme" | "drama"
            | "music" | "art" | "secret" | "occult" | "reveal" | "hero journey"

place-description ::= (place | place "connected to" place)

place ::= "the country" | "the region" | "the city" | "the street"
       | "the house" | "the building" | "the dungeon" | "the labyrinth"
       | "the cave" | "the swamp" | "the room" | "the hallway"
       | "the chest" | "the bag" | "the wallet" | "the vault"
       | "the keep" | "the hideout" | "plato's cave"
       | "the garden of eden" | "the river styx"
       | "the restaurant at the end of the universe"

monster-description ::= (type-name | type-name "with a special enchantment")
                      "monster, with" description

description ::= adjective+ noun

adjective ::= "fierce" | "terrifying" | "powerful" | "mysterious"
            | "ancient" | "magical" | "enchanted" | "cursed"

noun ::= "beast" | "creature" | "demon" | "spirit" | "undead"
       | "golem" | "construct" | "minion" | "boss"

art-description ::= (type-name | type-name "with a special enchantment")
                  "work of art, depicting" description

music-description ::= "a" musical-style "piece, playing softly in the background."

musical-style ::= "epic" | "heroic" | "mysterious" | "spooky"
                 | "triumphant" | "eerie" | "sinister" | "peaceful"
```
This grammar includes rules for generating descriptions of the entrance to the dungeon, paths leading from room to room, and treasure-filled rooms guarded by monsters. It also includes rules for generating descriptions of different types of objects, places, monsters, art, and music that might be found in the dungeon.

The grammar uses nonterminals (e.g., `dungeon-path`, `entrance-description`, `path`) to represent different parts of the dungeon description, and terminals (e.g., `type-name`, `place`, `adjective`, `noun`) to represent specific words or phrases that can be used in those descriptions. The grammar also includes rules for combining nonterminals and terminals using operators such as concatenation (`::=`), alternation (`|`), repetition (`*`), and optionality (`[...]`).

By using this grammar to generate prompts, we can create a wide variety of descriptions for different parts of the dungeon. For example, here are some possible outputs generated by the `entrance-description` rule:

* "Imagine the entrance to the dungeon, with its ominous weapon guarding the way in."
* "Consider the entrance to the dungeon, with its fearsome spell guarding the way in."
* "Draw a room filled with treasure, guarded by a fierce artifact monster. The walls are adorned with enchanted works of art, and there's a mysterious piece playing softly in the background. Perhaps there's a secret passage leading out of the room, or a clue to some greater mystery."
* "Imagine the entrance to the dungeon, with its ancient challenge guarding the way in."
* "Draw a room filled with treasure, guarded by a cursed hero journey monster. The walls are adorned with magical works of art, and there's a triumphant piece playing softly in the background. Perhaps there's a secret passage leading out of the room, or a clue to some greater mystery."

And here are some possible outputs generated by the `path` rule:

* "Consider a path leading from one room to another, passing through the city connected to the swamp."
* "Consider a path leading from one room to another, passing through the vault connected to the hideout."
* "Consider a path leading from one room to another, passing through the garden of eden connected to plato's cave."

And here are some possible outputs generated by the `treasure-room-description` rule:

* "Draw a room filled with treasure, guarded by a powerful spell monster. The walls are adorned with enchanted works of art, and there's a mysterious piece playing softly in the background. Perhaps there's a secret passage leading out of the room, or a clue to some greater mystery."
* "Draw a room filled with treasure, guarded by a fierce weapon monster. The walls are adorned with ancient works of art, and there's a triumphant piece playing softly in the background. Perhaps there's a secret passage leading out of the room, or a clue to some greater mystery."
* "Draw a room filled with treasure, guarded by a cursed challenge monster. The walls are adorned with magical works of art, and there's a spooky piece playing softly in the background. Perhaps there's a secret passage leading out of the room, or a clue to some greater mystery."

By combining these rules in different ways, we can generate many different descriptions for the dungeon, each one unique and interesting.
#+end_src
