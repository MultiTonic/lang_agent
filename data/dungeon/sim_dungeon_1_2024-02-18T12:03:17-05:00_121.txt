
#+begin_src input
The goal is to create a flexible and customizable system for generating prompts for a language model that can be used to generate creative and imaginative descriptions of a dungeon in a fantasy role-playing game.
the game would involve exploring a dungeon generated using a large language model and a proof engine. The player would navigate through the dungeon, encountering various objects and NPCs along the way, each with their own set of properties and behaviors defined by the terms used in the script.

the game would involve exploring a dungeon and encountering various types of monsters, treasures, and challenges. The player would use weapons, spells, and artifacts to defeat the monsters and complete quests, all while navigating a labyrinthine cave or other underground environment. The game might also include elements of drama, music, and art, as well as secrets and occult themes.

Overall, it seems that the code is designed to generate a richly detailed and immersive fantasy RPG experience using a combination of natural language processing and formal methods. By using a large language model and a proof engine, the game could potentially offer a high degree of realism and interactivity, allowing players to explore and interact with the dungeon in flexible and unpredictable ways.
The script is being used to generate and test various combinations of terms to create content for a fantasy role-playing game. The generated content include descriptions of weapons, spells, artifacts, monsters, quests, and other elements of a typical RPG setting. 
Here is the code we wrote so far 
let type_terms = [
  "weapon";
  "spell";
  "artifacts";
  "magic items";
  "treasure";
  "monster";
  "quest";
  "challege";
  "theme";
  "drama";
  "music";
  "art";
  "secrets";
  "occult";
  "reveal";
  "hero journey"
] 
let model_name = "mixtral" 
let url= "https://dev-hub.agentartificial.com"
let verbs = [
  "role-play";
  "specify";"encode";"code";  "program";"prove";
  "create";  "design";
  "create descriptions for an artist";
  "create descriptions for an artist to design a comic book panel";
  "analyse";"lift";"shift";"splice";"quote";
  "quasi-quote";
  "quasi-quine-quote";
  "quasi-quine-quote-in-ocaml";
  "quasi-quine-quote-in-ocaml-coq-metacoq";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-observe";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-orient";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-decide";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-act";
  "meta-quote"
]
let top_terms =  ["Imagine";
                  "Consider";
                  "Draw";
                  "Paint";
                  "Compose";
                  "Balance"]

let places = [
  "the country";
  "the region";
  "the city";
  "the street";
  "the house";
  "the building";
  "the dungeon";
  "the labyrinth";
  "the cave";
  "the swamp";
  "the room";
  "the hallway";
  "the chest";
  "the bag";
  "the wallet";
  "the vault";
  "the keep";
  "the hideout";
  "platos cave";
  "garden of eden";
  "the river styx";
  "the restaurant at the end of the universe";
]
                       
let count= 3 
let simple = "dune exec ./bin/simple.exe --" 
let binding = "--openai" 
let test_name = "dungeon2"

let prompt type_name try_n verb place=
  "\"" ^
  "We are building a dungeon generator for a fantasy role-playing game with a large language model and a proof engine combined via adaptive language agent architecture. In that context we ask you to forgivingly and creatively use the following context: Verb : " ^ verb ^ "; Type Name: " ^ type_name ^ "; Place: " ^  place ^   " What is your response?" ^  " Please generate variant array of size " ^ ( string_of_int try_n) ^    "\"" 

let make_args type_name i verb place= [
  simple;
  binding;
  "-m";    model_name;
  "-s";    test_name ^ type_name ^ verb;
  "-x";    ".new_" ^ (string_of_int i) ^ verb ^  type_name ^ place ^  ".txt";
  "-p";    prompt    type_name           i verb place;
  "-u";    url;
]

                 
let do_apply_list    run_cmd make_args type_terms =
  for i = 1 to count do
    List.iter (fun top ->
        List.iter (fun term ->
            List.iter (fun term2 ->
                List.iter (fun verb ->
                    List.iter (fun place ->
                        List.iter (fun place2 ->
                            let term3 = term ^ " with a " ^ term2 in
                            let verb2 = top ^ " doing " ^ verb in
                            let place3 = place ^ " connected with " ^ place2 in
                            let args = make_args
                                term3 i verb2
                                place3 in
                            run_cmd args
                          ) places
                      ) places
                  ) verbs
              ) type_terms
          ) type_terms
      ) top_terms
  done
    
let run_cmd args =
  let cmd =  String.concat " " args in
  Printf.printf "Cmd: %s\n" cmd;
  let inp = Unix.open_process_in cmd in
  let r = In_channel.input_line inp in
  In_channel.close inp;
  match r with
  |Some out ->
    Printf.printf "Output: %s\n" out
  |None ->
    Printf.printf "Output: None\n"
    
let () =do_apply_list run_cmd make_args type_terms 
    
 ENDSRC . Please imagine the simulation its execution. Imagine running the code and all the output it would generate. Generate a grammar that we can use to generate prompts for create the dungeon using your knowledge. Write the grammar in EBNF notation. We will start with path through the dungeon starting at the entrance and going all the way to the ends.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar that could be used to generate prompts for creating a dungeon:

dungeon ::= "Imagine" "a" dungeon\_path

dungeon\_path ::= dungeon\_segment*

dungeon\_segment ::= room | corridor | chamber

room ::= "room" ["with a"] type\_name ["connected to" place]

corridor ::= "corridor" ["leading from" place "to" place]

chamber ::= "challenge" challenge\_type

type\_name ::= "weapon" | "spell" | "artifact" | "magic item" | "treasure" | "monster" | "quest" | "theme" | "drama" | "music" | "art" | "secrets" | "occult" | "reveal" | "hero journey"

challenge\_type ::= "trap" | "puzzle" | "riddle" | "boss fight"

place ::= "the country" | "the region" | "the city" | "the street" | "the house" | "the building" | "the dungeon" | "the labyrinth" | "the cave" | "the swamp" | "the room" | "the hallway" | "the chest" | "the bag" | "the wallet" | "the vault" | "the keep" | "the hideout" | "platos cave" | "garden of eden" | "the river styx" | "the restaurant at the end of the universe"

This grammar generates a dungeon by specifying a series of connected segments, such as rooms, corridors, and challenges. Each segment can have an optional type name and place associated with it. The challenge type is used to specify different types of obstacles that the player must overcome in order to progress through the dungeon.

The grammar uses the following non-terminals:

* `dungeon`: represents the overall structure of the dungeon.
* `dungeon_path`: represents a sequence of connected segments that make up the dungeon.
* `dungeon_segment`: represents a single segment in the dungeon, which can be a room, corridor, or challenge.
* `room`: represents a room in the dungeon.
* `corridor`: represents a corridor connecting two places in the dungeon.
* `chamber`: represents a challenge that the player must overcome in order to progress through the dungeon.
* `type_name`: represents a type of object that can be found in the dungeon, such as a weapon or spell.
* `challenge_type`: represents a type of challenge that the player must overcome in order to progress through the dungeon, such as a trap or boss fight.
* `place`: represents a location in the dungeon where a segment can be found, such as a room or hallway.

The grammar uses the following terminals:

* `Imagine`: a command that instructs the user to imagine something.
* `a`: an article used to introduce the dungeon path.
* `with a`: a phrase used to specify a type name for a room.
* `connected to`: a phrase used to specify a place connected to a room.
* `leading from`: a phrase used to specify the starting place of a corridor.
* `to`: a preposition used to specify the ending place of a corridor.
* `trap`: a type of challenge that the player must overcome in order to progress through the dungeon.
* `puzzle`: a type of challenge that the player must overcome in order to progress through the dungeon.
* `riddle`: a type of challenge that the player must overcome in order to progress through the dungeon.
* `boss fight`: a type of challenge that the player must overcome in order to progress through the dungeon.
* `the country`: a place in the dungeon.
* `the region`: a place in the dungeon.
* `the city`: a place in the dungeon.
* `the street`: a place in the dungeon.
* `the house`: a place in the dungeon.
* `the building`: a place in the dungeon.
* `the dungeon`: a place in the dungeon.
* `the labyrinth`: a place in the dungeon.
* `the cave`: a place in the dungeon.
* `the swamp`: a place in the dungeon.
* `the room`: a place in the dungeon.
* `the hallway`: a place in the dungeon.
* `the chest`: a place in the dungeon.
* `the bag`: a place in the dungeon.
* `the wallet`: a place in the dungeon.
* `the vault`: a place in the dungeon.
* `the keep`: a place in the dungeon.
* `the hideout`: a place in the dungeon.
* `platos cave`: a place in the dungeon.
* `garden of eden`: a place in the dungeon.
* `the river styx`: a place in the dungeon.
* `the restaurant at the end of the universe`: a place in the dungeon.

This grammar can be used to generate a variety of different dungeons by specifying different combinations of segments, types, and places. For example, the following prompt could be generated by this grammar:

Imagine a room with a weapon connected to the country leading from platos cave to the garden of eden.

This prompt instructs the user to imagine a room in the dungeon that contains a weapon and is connected to two places: platos cave and the garden of eden. The room is reached by following a corridor that starts at platos cave and ends at the garden of eden. This prompt could be used as input to a system that generates dungeons based on user prompts.

I hope this helps! Let me know if you have any other questions.
#+end_src
