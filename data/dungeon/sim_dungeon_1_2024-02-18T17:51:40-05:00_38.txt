
#+begin_src input
The goal is to create a flexible and customizable system for generating prompts for a language model that can be used to generate creative and imaginative descriptions of a dungeon in a fantasy role-playing game.
the game would involve exploring a dungeon generated using a large language model and a proof engine. The player would navigate through the dungeon, encountering various objects and NPCs along the way, each with their own set of properties and behaviors defined by the terms used in the script.

the game would involve exploring a dungeon and encountering various types of monsters, treasures, and challenges. The player would use weapons, spells, and artifacts to defeat the monsters and complete quests, all while navigating a labyrinthine cave or other underground environment. The game might also include elements of drama, music, and art, as well as secrets and occult themes.

Overall, it seems that the code is designed to generate a richly detailed and immersive fantasy RPG experience using a combination of natural language processing and formal methods. By using a large language model and a proof engine, the game could potentially offer a high degree of realism and interactivity, allowing players to explore and interact with the dungeon in flexible and unpredictable ways.
The script is being used to generate and test various combinations of terms to create content for a fantasy role-playing game. The generated content include descriptions of weapons, spells, artifacts, monsters, quests, and other elements of a typical RPG setting. 
Here is the code we wrote so far 
let type_terms = [
  "weapon";
  "spell";
  "artifacts";
  "magic items";
  "treasure";
  "monster";
  "quest";
  "challege";
  "theme";
  "drama";
  "music";
  "art";
  "secrets";
  "occult";
  "reveal";
  "hero journey"
] 
let model_name = "mixtral" 
let url= "https://dev-hub.agentartificial.com"
let verbs = [
  "role-play";
  "specify";"encode";"code";  "program";"prove";
  "create";  "design";
  "create descriptions for an artist";
  "create descriptions for an artist to design a comic book panel";
  "analyse";"lift";"shift";"splice";"quote";
  "quasi-quote";
  "quasi-quine-quote";
  "quasi-quine-quote-in-ocaml";
  "quasi-quine-quote-in-ocaml-coq-metacoq";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-observe";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-orient";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-decide";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-act";
  "meta-quote"
]
let top_terms =  ["Imagine";
                  "Consider";
                  "Draw";
                  "Paint";
                  "Compose";
                  "Balance"]

let places = [
  "the country";
  "the region";
  "the city";
  "the street";
  "the house";
  "the building";
  "the dungeon";
  "the labyrinth";
  "the cave";
  "the swamp";
  "the room";
  "the hallway";
  "the chest";
  "the bag";
  "the wallet";
  "the vault";
  "the keep";
  "the hideout";
  "platos cave";
  "garden of eden";
  "the river styx";
  "the restaurant at the end of the universe";
]
                       
let count= 3 
let simple = "dune exec ./bin/simple.exe --" 
let binding = "--openai" 
let test_name = "dungeon2"

let prompt type_name try_n verb place=
  "\"" ^
  "We are building a dungeon generator for a fantasy role-playing game with a large language model and a proof engine combined via adaptive language agent architecture. In that context we ask you to forgivingly and creatively use the following context: Verb : " ^ verb ^ "; Type Name: " ^ type_name ^ "; Place: " ^  place ^   " What is your response?" ^  " Please generate variant array of size " ^ ( string_of_int try_n) ^    "\"" 

let make_args type_name i verb place= [
  simple;
  binding;
  "-m";    model_name;
  "-s";    test_name ^ type_name ^ verb;
  "-x";    ".new_" ^ (string_of_int i) ^ verb ^  type_name ^ place ^  ".txt";
  "-p";    prompt    type_name           i verb place;
  "-u";    url;
]

                 
let do_apply_list    run_cmd make_args type_terms =
  for i = 1 to count do
    List.iter (fun top ->
        List.iter (fun term ->
            List.iter (fun term2 ->
                List.iter (fun verb ->
                    List.iter (fun place ->
                        List.iter (fun place2 ->
                            let term3 = term ^ " with a " ^ term2 in
                            let verb2 = top ^ " doing " ^ verb in
                            let place3 = place ^ " connected with " ^ place2 in
                            let args = make_args
                                term3 i verb2
                                place3 in
                            run_cmd args
                          ) places
                      ) places
                  ) verbs
              ) type_terms
          ) type_terms
      ) top_terms
  done
    
let run_cmd args =
  let cmd =  String.concat " " args in
  Printf.printf "Cmd: %s\n" cmd;
  let inp = Unix.open_process_in cmd in
  let r = In_channel.input_line inp in
  In_channel.close inp;
  match r with
  |Some out ->
    Printf.printf "Output: %s\n" out
  |None ->
    Printf.printf "Output: None\n"
    
let () =do_apply_list run_cmd make_args type_terms 
    
 ENDSRC . Please imagine the simulation its execution. Imagine running the code and all the output it would generate. Generate a grammar that we can use to generate prompts for create the dungeon using your knowledge. Write the grammar in EBNF notation. We will start with path through the dungeon starting at the entrance and going all the way to the ends.

#+end_src
#+begin_src output mixtral
 Result: Here is an example of an EBNF grammar that could be used to generate prompts for creating a dungeon:
```vbnet
dungeon = {path | room}*

path = path_segment+

path_segment = 
  "From" place 
  ("to" place | "and then" place)
  ("," place | "; and then" place)*

room = 
  "Enter" place 
  ("and find" description | "where you see" description)
  ("." | "," | ";")

description = 
  object_description*
  monster_description*
  treasure_description*
  quest_description*
  
object_description = 
  "a" object_type (":" object_details | ",")*

object_type = 
  "weapon" | "spell" | "artifact" | "magic item"

object_details = 
  appearance | effect | origin | name

appearance = 
  "that looks like" appearance_detail

effect = 
  "that has the power of" power

origin = 
  "that comes from" origin_place

name = 
  ("called" name_string | "named" name_string)

monster_description = 
  "a" monster_type (":" monster_details | ",")*

monster_type = 
  "monster" | "beast" | "creature"

monster_details = 
  appearance | power | origin | name

treasure_description = 
  "a treasure chest containing" treasure_items ("," treasure_items)*

treasure_items = 
  "some" item_type ("worth" value | "in a quantity of" quantity)

item_type = 
  "gold" | "jewels" | "magic items"

value = 
  number_string | amount_string

quantity = 
  number_string | amount_string

quest_description = 
  "a quest to" quest_action ("," quest_action)*

quest_action = 
  "find" object_type | "slay" monster_type | "retrieve" treasure_type

place = 
  identifier | "the" place_noun

place_noun = 
  ("room" | "area" | "section") "of" the_dungeon

the_dungeon = 
  ("this" | "the") dungeon_name

dungeon_name = 
  ("dungeon" | "labyrinth" | "maze")

appearance_detail = 
  identifier | "of" appearance_noun

appearance_noun = 
  ("color" | "shape" | "size" | "material")

power = 
  identifier | "the power to" verb_infinitive

origin_place = 
  identifier | "of" origin_noun

origin_noun = 
  ("place" | "region" | "realm")

name_string = 
  ("'"+identifier+"'" | identifier)

number_string = 
  digit+ ("." digit*)?

amount_string = 
  number_string ("dozen" | "hundred" | "thousand" | "million")
```
This grammar includes rules for generating descriptions of rooms, objects, monsters, treasures, and quests. It also includes rules for generating place names and references to the dungeon itself. The grammar can be used to generate a wide variety of prompts for creating a dungeon. For example:
```vbnet
Enter the entrance and find a weapon called the Sword of Light. It looks like a longsword made of pure silver, with intricate runes etched along the blade. The sword has the power to cut through any material, no matter how dense or hard. The sword comes from the Forge of Eternity, deep within the heart of the dungeon.

From the entrance and then to the first room, where you see a treasure chest containing some gold worth 100 pieces and a magic item called the Ring of Invisibility. The ring has the power to make the wearer invisible to any sight, no matter how powerful or mundane. The ring comes from the Tower of the Sorceress, located in the far reaches of the dungeon.

From the first room and then to the second room, where you see a monster called the Dragon of Darkness. It is a massive, black dragon with eyes that glow red with malice. The dragon has the power to breathe fire and control shadows. It comes from the Caverns of Eternal Night, deep beneath the surface of the world.
```
This grammar can be extended or modified to include additional rules for generating other types of prompts or descriptions. For example, it could be modified to include rules for generating traps, puzzles, or non-player characters (NPCs). It could also be modified to generate prompts in different styles or tones, such as more serious or humorous prompts. The possibilities are endless!
#+end_src
