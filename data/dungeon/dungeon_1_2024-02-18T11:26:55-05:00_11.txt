
#+begin_src input
We are working on creating a GBNF grammar for a dungeon. It follows a standard EBNF notation at the end of this message (see TARGET). We translating an dungeon into this EBNF in chunks. Consider the following chunk of the dungeon between BEGINSRC and ENDSRC for translation to EBNF. BEGINSRC  
let type_terms = [
  "weapon";
  "spell";
  "artifacts";
  "magic items";
  "treasure";
  "monster";
  "quest";
  "challege";
  "theme";
  "drama";
  "music";
  "art";
  "secrets";
  "occult";
  "reveal";
  "hero journey"
] 
let model_name = "mixtral" 
let url= "https://dev-hub.agentartificial.com"
let verbs = [
  "role-play";
  "specify";"encode";"code";  "program";"prove";
  "create";  "design";
  "create descriptions for an artist";
  "create descriptions for an artist to design a comic book panel";
  "analyse";"lift";"shift";"splice";"quote";
  "quasi-quote";
  "quasi-quine-quote";
  "quasi-quine-quote-in-ocaml";
  "quasi-quine-quote-in-ocaml-coq-metacoq";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-observe";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-orient";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-decide";
  "quasi-quine-quote-in-ocaml-coq-metacoq-introspector-bootstrap-act";
  "meta-quote"
]
let top_terms =  ["Imagine";
                  "Consider";
                  "Draw";
                  "Paint";
                  "Compose";
                  "Balance"]

let places = [
  "the country";
  "the region";
  "the city";
  "the street";
  "the house";
  "the building";
  "the dungeon";
  "the labyrinth";
  "the cave";
  "the swamp";
  "the room";
  "the hallway";
  "the chest";
  "the bag";
  "the wallet";
  "the vault";
  "the keep";
  "the hideout";
  "platos cave";
  "garden of eden";
  "the river styx";
  "the restaurant at the end of the universe";
]
                       
let count= 3 
let simple = "dune exec ./bin/simple.exe --" 
let binding = "--openai" 
let test_name = "dungeon2"

let prompt type_name try_n verb place=
  "\"" ^
  "We are building a dungeon generator for a fantasy role-playing game with a large language model and a proof engine combined via adaptive language agent architecture. In that context we ask you to forgivingly and creatively use the following context: Verb : " ^ verb ^ "; Type Name: " ^ type_name ^ "; Place: " ^  place ^   " What is your response?" ^  " Please generate variant array of size " ^ ( string_of_int try_n) ^    "\"" 

let make_args type_name i verb place= [
  simple;
  binding;
  "-m";    model_name;
  "-s";    test_name ^ type_name ^ verb;
  "-x";    ".new_" ^ (string_of_int i) ^ verb ^  type_name ^ place ^  ".txt";
  "-p";    prompt    type_name           i verb place;
  "-u";    url;
]

                 
let do_apply_list    run_cmd make_args type_terms =
  for i = 1 to count do
    List.iter (fun top ->
        List.iter (fun term ->
            List.iter (fun term2 ->
                List.iter (fun verb ->
                    List.iter (fun place ->
                        List.iter (fun place2 ->
                            let term3 = term ^ " with a " ^ term2 in
                            let verb2 = top ^ " doing " ^ verb in
                            let place3 = place ^ " connected with " ^ place2 in
                            let args = make_args
                                term3 i verb2
                                place3 in
                            run_cmd args
                          ) places
                      ) places
                  ) verbs
              ) type_terms
          ) type_terms
      ) top_terms
  done
    
let run_cmd args =
  let cmd =  String.concat " " args in
  Printf.printf "Cmd: %s\n" cmd;
  let inp = Unix.open_process_in cmd in
  let r = In_channel.input_line inp in
  In_channel.close inp;
  match r with
  |Some out ->
    Printf.printf "Output: %s\n" out
  |None ->
    Printf.printf "Output: None\n"
    
let () =do_apply_list run_cmd make_args type_terms 
    
 ENDSRC . Please rewrite it to be more beautiful and in EBNF form. We are going to use the following TARGET: BEGINTARGET comment ::= "#" [a-zA-Z0-9 \t]*
letter ::= [a-zA-Z]
digit ::= [0-9]
S ::= ( " " | "\n" | "\t" | "\r"  )
symbol ::= "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"  | "'" |  "=" | "|" | "." | "," | ";" | "-"        | "+" | "*" | "?" 
character ::= letter | digit | symbol | "_" | " "
identifier ::= letter ( letter | digit | "_" )*
terminal ::= "'" character  "'"  ( character  "'" )  "'"
terminator ::= (";" | ".") 
term ::= "("   S   rhs   S   ")"      | "["   S   rhs   S   "]"      | "{"   S   rhs   S   "}"      | terminal      | identifier
factor ::= term  S  "?"         | term   S   "*"        | term   S   "+"        | term   S   "-"   S   term        | term   S
concatenation ::= ( S   factor   S   "," ? ) +
alternation ::= ( S   concatenation   S   "|" ? ) +
rhs ::= alternation
lhs ::= identifier
rule ::= lhs   S   "="   S   rhs   S   terminator comment*
root ::= comment* ( S   rule   S ) * ENDTARGET as our target grammar format. Please rewrite SRC into TARGET. You are to only respond using the target custom GBNF grammar and put  descriptions or comments at the end of the rule with a #, see the grammar for rules. Please start with a comment using '#' to start comments on a new line. 

#+end_src
#+begin_src output mixtral
 Result: BEGINTARGET

; Dungeon Generator Program
# This program is a dungeon generator for a fantasy role-playing game that uses a large language model and a proof engine combined via adaptive language agent architecture. It asks the language model to generate descriptions of dungeons with different properties, which are then saved as text files.

; Variables
type_name ::= identifier ; Type Name
try_n ::= digit ; Number of variants to generate
verb ::= identifier ; Verb
place ::= identifier ; Place

; Commands
simple ::= "dune exec ./bin/simple.exe --" ; Run the simple executable with OpenAI binding and specified options
binding ::= "--openai" ; Use OpenAI API for language model queries
url ::= "https://dev-hub.agentartificial.com" ; URL of the server to send requests to

; Prompt Generation
prompt ::= "#" [a-zA-Z0-9 \t]* ; Comment
make_args ::= simple S binding S "-m" S model\_name S "-s" S test\_name S type\_name S verb S place S "-x" S ".new\_" digit S verb S type\_name S place S ".txt" S "-p" S prompt S type\_name S i S verb S place ; Generate the command line arguments for making a prompt
type\_terms ::= "dune" | "fantasy" | "game" | "large" | "language" | "model" ; Type terms
top\_terms ::= "Imagine" | "Consider" | "Create" | "Generate" | "Design" | "Build" ; Top level terms
verbs ::= "describe" | "design" | "generate" | "build" | "create" | "draw" ; Verb phrases
places ::= "dungeon" | "room" | "corridor" | "passage" | "entrance" | "exit" ; Place types

; Dungeon Generation Function
do\_apply\_list ::= 
  ( S term S "args" S "=" S 
    ( S "[" S 
      (S "run\_cmd" S args S ";" S) + 
    "]" S ) ; Run the given command with each set of arguments in the list

; Command Execution
run\_cmd ::= 
  ( S "let" S cmd S "=" S 
    ( S "String.concat" S " " S args S ";" S) ; Define a command as the string concatenation of its arguments separated by spaces, followed by a semicolon to terminate the statement
  S "Printf.printf" S "\"Cmd: %s\\n\"" S cmd ; Print the command to the console for debugging purposes
  S "let" S inp S "=" S Unix.open\_process\_in cmd ; Open a process and assign its input channel to the variable "inp"
  S "let" S r S "=" S In\_channel.input\_line inp ; Read a line from the input channel and assign it to the variable "r"
  S In\_channel.close inp ; Close the input channel
  S (S "Printf.printf" S "\"Output: %s\\n\"" S r ; Print the output of the command to the console for debugging purposes
    | S "Printf.printf" S "\"Output: None\\n\"" ; If the output is empty, print a message indicating that fact
  ) ; End of conditional statement

; Main Program
  ( S "# Start the main program" ; Comment
  S do\_apply\_list S run\_cmd S make\_args S type\_terms ; Call the "do\_apply\_list" function with the "run\_cmd" command and the "make\_args" list of arguments, using the "type\_terms" set as the input

) ; End of main program

ENDTARGET
#+end_src
